# Maintainer:

## useful links
# https://elixir-lang.org
# https://github.com/elixir-lang/elixir

## options
if [ -n "$_srcinfo" ] || [ -n "$_pkgver" ]; then
  : ${_autoupdate:=false}
else
  : ${_autoupdate:=true}
fi

## basic info
_pkgname="elixir"
pkgname="$_pkgname-stable"
pkgver=1.16.2
pkgrel=1
pkgdesc="a functional meta-programming aware language built on top of the Erlang VM"
url="https://github.com/elixir-lang/elixir"
license=('Apache-2.0')
arch=('any')

# main package
_main_package() {
  depends=('erlang-nox')
  checkdepends=('git')

  provides=("$_pkgname=$_pkgver")
  conflicts=("$_pkgname")

  _pkgsrc="$_pkgname-$_pkgver"
  source=("$_pkgsrc.tar.gz::https://github.com/elixir-lang/elixir/archive/v$_pkgver.tar.gz")
  sha256sums=('SKIP')
}

# common functions
pkgver() {
  echo "${_pkgver:?}"
}

build() {
  cd "$_pkgsrc"
  make
}

package() {
  cd "$_pkgsrc"
  install -Dm644 "LICENSE" -t "$pkgdir/usr/share/licenses/$pkgname"
  make DESTDIR="$pkgdir" PREFIX=/usr install
}

# update version
_update_version() {
  : ${_pkgver:=$pkgver}

  if [[ "${_autoupdate::1}" != "t" ]]; then
    return
  fi

  local _response=$(curl -Ssf "$url/releases.atom")
  local _tag=$(
    printf '%s' "$_response" \
      | grep '/releases/tag/' \
      | sed -E 's@^.*/releases/tag/(.*)".*$@\1@' \
      | grep -Ev '[a-z]{2}' | sort -rV | head -1
  )
  local _pkgver_new="${_tag#v}"

  # update _pkgver
  if [[ "${_pkgver_new:?}" =~ ^[0-9.]+$ ]]; then
    if [ "$_pkgver" != "${_pkgver_new:?}" ]; then
      _pkgver="${_pkgver_new:?}"
    fi
  else
    echo "Error: release candidate or other unusual version detected: '$_pkgver_new'"
    unset _pkgver
  fi
}

# execute
_update_version
_main_package
