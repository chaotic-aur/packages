# Maintainer: aur.chaotic.cx

## links
# https://obsproject.com
# https://github.com/obsproject/obs-studio
# https://github.com/obsproject/cef

## options
: ${_plugin_aja:=false}

# build-aux/modules/99-cef.json
: ${_cef_branch:=6533}
: ${_cef_ver=_v3}

_pkgname="obs-studio"
pkgname="$_pkgname-git"
pkgver=31.0.2.r116.g8db61f2
pkgrel=1
pkgdesc="Free, open source software for live streaming and recording - Browser enabled"
url="https://github.com/obsproject/obs-studio"
license=("GPL-2.0-or-later")
arch=("x86_64")

depends=(
  'curl'
  'ffmpeg'
  'jack'
  'jansson'
  'libpipewire'
  'librist'
  'libvpl'
  'libxcomposite'
  'mbedtls'
  'pciutils'
  'qrcodegencpp-cmake'
  'qt6-svg'
  'rnnoise'
  'speexdsp'
)
makedepends=(
  #'asio'
  'cmake'
  'ffnvcodec-headers'
  'git'
  'libdatachannel'
  'libfdk-aac'
  'luajit'
  'nlohmann-json'
  'python'
  'qt6-wayland'
  'sndio'
  'swig'
  'uthash'
  'vlc'
  'wayland'
  'websocketpp'
  'x264'
  'xdg-desktop-portal'
)
optdepends=(
  'libfdk-aac: FDK AAC codec support'
  'libva-intel-driver: hardware encoding'
  'libva-mesa-driver: hardware encoding'
  'luajit: scripting support'
  'python: scripting support'
  'sndio: sndio input client'
  'v4l2loopback-dkms: virtual camera support'
  'vlc: VLC Media Source'
)

provides=("$_pkgname=${pkgver%%.r*}")
conflicts=("$_pkgname")

options=('!debug')

_source_main() {
  _pkgsrc="$_pkgname"
  source=("$_pkgsrc"::"git+$url.git")
  sha256sums=('SKIP')

  if [ "${_plugin_aja::1}" == "t" ]; then
    makedepends+=('libajantv2') # AUR
    _plugin_aja='ON'
  else
    _plugin_aja='OFF'
  fi
}

_source_obs_studio() {
  local _sources_add=(
    #'obsproject.libdshowcapture'::'git+https://github.com/obsproject/libdshowcapture.git'
    'obsproject.obs-browser'::'git+https://github.com/obsproject/obs-browser.git'
    'obsproject.obs-websocket'::'git+https://github.com/obsproject/obs-websocket.git'
  )

  local _p
  for _p in ${_sources_add[@]}; do
    source+=("$_p")
    sha256sums+=('SKIP')
  done

  _prepare_obs_studio() (
    cd "$srcdir/$_pkgsrc"
    local _submodules=(
      #'obsproject.libdshowcapture'::'plugins/win-dshow/libdshowcapture'
      'obsproject.obs-browser'::'plugins/obs-browser'
      'obsproject.obs-websocket'::'plugins/obs-websocket'
    )
    _submodule_update
  )
}

_source_cef() {
  depends+=(
    'at-spi2-core'
    'libxdamage'
    'libxrandr'
    'nspr'
    'nss'
  )

  makedepends+=(
    'alsa-lib'
    'dbus'
    'expat'
    'glib2'
    'libcups'
    'libdrm'
    'libx11'
    'libxcb'
    'libxcomposite'
    'libxext'
    'libxfixes'
    'libxkbcommon'
    'mesa'
    'wayland'
  )

  _cef_src="cef_binary_${_cef_branch}_linux_${CARCH}"
  _cef_ext="tar.xz"
  _cef_filename="$_cef_src$_cef_ver.$_cef_ext"
  _cef_dl_url="https://cdn-fastly.obsproject.com/downloads"

  source+=("$_cef_filename"::"$_cef_dl_url/$_cef_filename")
  sha256sums+=('SKIP')
}

_source_asio() {
  _pkgsrc_asio="asio"
  _ver_asio=1.32.0
  source+=("$_pkgsrc_asio"::"git+https://github.com/chriskohlhoff/asio.git#tag=asio-${_ver_asio//./-}")
  sha256sums+=('SKIP')

  _build_asio() (
    cd "$_pkgsrc_asio/asio"
    autoreconf -fiv
    ./configure --prefix=/usr
    make
    make DESTDIR="$srcdir/deps" install
    find "$srcdir/deps" -type f
  )
}

_source_main
_source_asio
_source_cef
_source_obs_studio

prepare() {
  _submodule_update() {
    local _module
    for _module in "${_submodules[@]}"; do
      git submodule init "${_module##*::}"
      git submodule set-url "${_module##*::}" "$srcdir/${_module%::*}"
      git -c protocol.file.allow=always submodule update "${_module##*::}"
    done
  }

  _run_if_exists _prepare_obs_studio
}

pkgver() {
  cd "$_pkgsrc"
  local _version=$(git tag | grep -Ev '.*[a-z]{2}.*' | sort -rV | head -1)
  local _revision=$(git rev-list --count --cherry-pick "$_version"...HEAD)
  local _hash=$(git rev-parse --short=7 HEAD)
  printf '%s.r%s.g%s' "${_version:?}" "${_revision:?}" "${_hash:?}"
}

_build_cef() (
  local _cmake_options=(
    -S "$_cef_src"
    -B "$_cef_src"
    -DCMAKE_BUILD_TYPE=Release
    -DPROJECT_ARCH=$CARCH
    -Wno-dev
  )

  cmake "${_cmake_options[@]}"
  cmake --build "$_cef_src"
)

_build_obs_studio() (
  local _cmake_options=(
    -B build
    -S "$_pkgsrc"
    -DCMAKE_BUILD_TYPE=None
    -DCMAKE_INSTALL_PREFIX='/usr'
    -DCMAKE_INSTALL_LIBDIR='lib'
    -DCMAKE_PREFIX_PATH="$srcdir/deps/usr"
    -DCEF_ROOT_DIR="$srcdir/$_cef_src"
    -DOBS_VERSION_OVERRIDE="${pkgver%%.r*}"
    -DOBS_COMPILE_DEPRECATION_AS_WARNING=ON
    -DENABLE_BROWSER=ON # qrcodegencpp-cmake
    -DENABLE_LIBFDK=ON
    -DENABLE_UNIT_TESTS=OFF
    -DBUILD_TESTS=OFF
    -Wno-dev

    -DENABLE_AJA="${_plugin_aja:?}"
    -DENABLE_JACK=ON
    -DENABLE_NEW_MPEGTS_OUTPUT=ON
    -DENABLE_VLC=ON
    -DENABLE_VST=ON
    -DENABLE_WEBRTC=ON
  )

  cmake "${_cmake_options[@]}"
  cmake --build build
)

build() (
  export CFLAGS CXXFLAGS
  CFLAGS="${CFLAGS/_FORTIFY_SOURCE=?/_FORTIFY_SOURCE=2}"
  CXXFLAGS="${CXXFLAGS/_FORTIFY_SOURCE=?/_FORTIFY_SOURCE=2}"

  _build_asio
  _build_cef
  _build_obs_studio
)

package() {
  DESTDIR="$pkgdir" cmake --install build
  chmod -R u+rwX,go+rX,go-w "$pkgdir"
}

_run_if_exists() {
  if declare -F "$1" > /dev/null; then
    eval "$1"
  fi
}
