#!/usr/bin/env bash

# pre-build checks
_check_rate() (
  _package=$(grep -Pom1 '^pkgname = \K\S+$' .SRCINFO || true)

  _rate=$((3600 * ${1:-18})) # hours
  _date_build=$(
    LC_ALL=C pacman -Si "chaotic-aur/$_package" 2> /dev/null \
      | grep -Pom1 '^Build Date\s+:\s+\K\S.*\S$'
  ) || true

  _epoch_build=$(\date '+%s' -d "${_date_build:-1970-01-01}")
  _epoch_now=$(\date '+%s')
  _epoch_diff=$((_epoch_now - _epoch_build))

  if [[ "$_epoch_diff" -lt "$_rate" ]]; then
    echo "Heavy package.  Skipping build."
    echo "> Last built $((_epoch_diff / 3600)) hours ago."
    return $CI_CODE_SKIP
  fi
)

_check_status() (
  local _url_repo _url_ci _commit _response _msg_err _success_ci
  _url_repo="https://github.com/openvinotoolkit/openvino"
  _commit=$(git ls-remote "$_url_repo.git" HEAD 2>/dev/null | grep -m1 -oP '\w+(?=\t\w)')
  _url_ci="$_url_repo/commit/$_commit/checks"
  _response=$(curl -Ssf "$_url_ci")
  _success_ci=false

  if grep -qo 'favicon-success.svg' <<<"$_response"; then
    _msg_err="Check-in success."
    _success_ci=true
  elif grep -qo 'favicon-failure.svg' <<<"$_response"; then
    _msg_err="Error: Check-in failed."
    _success_ci=false
  else
    _msg_err="Error: Check-in incomplete."
    _success_ci=false
  fi

  echo "$_msg_err"
  echo "> $_url_ci"

  if [ "${_success_ci::1}" != "t" ]; then
    return "$CI_CODE_SKIP"
  fi
)

_check_rate 18 || return $?
_check_status || return $?
