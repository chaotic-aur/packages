# Maintainer: aur.chaotic.cx

_pkgname="citron"
pkgname="$_pkgname-git"
pkgver=0.6.1.r40.g65dfe32
pkgrel=1
pkgdesc="Yet another emulator fork"
url="https://git.citron-emu.org/citron/emu"
license=('GPL-3.0-or-later')
arch=('x86_64')

depends=(
  'ffmpeg'
  'libboost_context.so' # boost-libs
  'libfmt.so'
  'libusb'
  'qt6-multimedia'
  'qt6-webengine'
  'sdl2'
)
makedepends=(
  'boost'
  'cmake'
  'git'
  'glslang'
  'ninja'
  'nlohmann-json'
  'qt6-tools'
  'rapidjson'
  'robin-map'
  'stb'
)

provides=("$_pkgname")
conflicts=("$_pkgname")

_source_main() {
  _pkgsrc="$_pkgname"
  source=("$_pkgsrc"::"git+$url.git")
  sha256sums=('SKIP')
}

_source_citron() {
  local _sources_add=(
    'arun11299.cpp-jwt'::'git+https://github.com/arun11299/cpp-jwt.git'
    'brofield.simpleini'::'git+https://github.com/brofield/simpleini.git'
    'bylaws.libadrenotools'::'git+https://github.com/bylaws/libadrenotools.git'
    #'ffmpeg'::'git+https://github.com/FFmpeg/FFmpeg.git'
    'gpuopen-librariesandsdks.vulkanmemoryallocator'::'git+https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator.git'
    'herumi.xbyak'::'git+https://github.com/herumi/xbyak.git'
    'khronosgroup.vulkan-headers'::'git+https://github.com/KhronosGroup/Vulkan-Headers.git'
    'khronosgroup.vulkan-utility-libraries'::'git+https://github.com/KhronosGroup/Vulkan-Utility-Libraries.git'
    'lat9nq.tzdb_to_nx'::'git+https://github.com/lat9nq/tzdb_to_nx.git'
    #'libsdl-org.sdl'::'git+https://github.com/libsdl-org/SDL.git'
    #'libusb'::'git+https://github.com/libusb/libusb.git'
    'lsalzman.enet'::'git+https://github.com/lsalzman/enet.git'
    #'microsoft.vcpkg'::'git+https://github.com/microsoft/vcpkg.git'
    'mozilla.cubeb'::'git+https://github.com/mozilla/cubeb.git'
    'xiph.opus'::'git+https://github.com/xiph/opus.git'
    'yhirose.cpp-httplib'::'git+https://github.com/yhirose/cpp-httplib.git'
    'yuzu-mirror.breakpad'::'git+https://github.com/yuzu-mirror/breakpad.git'
    'yuzu-mirror.discord-rpc'::'git+https://github.com/yuzu-mirror/discord-rpc.git'
    'yuzu-mirror.dynarmic'::'git+https://github.com/yuzu-mirror/dynarmic.git'
    'yuzu-mirror.mbedtls'::'git+https://github.com/yuzu-mirror/mbedtls.git'
    'yuzu-mirror.oaknut'::'git+https://github.com/yuzu-mirror/oaknut.git'
    'yuzu-mirror.sirit'::'git+https://github.com/yuzu-mirror/sirit.git'
  )

  local _p
  for _p in ${_sources_add[@]}; do
    source+=("$_p")
    sha256sums+=('SKIP')
  done

  _prepare_citron() (
    cd "$srcdir/$_pkgsrc"
    local _submodules=(
      'arun11299.cpp-jwt'::'externals/cpp-jwt'
      'brofield.simpleini'::'externals/simpleini'
      'bylaws.libadrenotools'::'externals/libadrenotools'
      #'ffmpeg'::'externals/ffmpeg/ffmpeg'
      'gpuopen-librariesandsdks.vulkanmemoryallocator'::'externals/VulkanMemoryAllocator'
      'herumi.xbyak'::'externals/xbyak'
      'khronosgroup.vulkan-headers'::'externals/Vulkan-Headers'
      'khronosgroup.vulkan-utility-libraries'::'externals/Vulkan-Utility-Libraries'
      'lat9nq.tzdb_to_nx'::'externals/nx_tzdb/tzdb_to_nx'
      #'libsdl-org.sdl'::'externals/SDL'
      #'libusb'::'externals/libusb/libusb'
      'lsalzman.enet'::'externals/enet'
      #'microsoft.vcpkg'::'externals/vcpkg'
      'mozilla.cubeb'::'externals/cubeb'
      'xiph.opus'::'externals/opus'
      'yhirose.cpp-httplib'::'externals/cpp-httplib'
      'yuzu-mirror.breakpad'::'externals/breakpad'
      'yuzu-mirror.discord-rpc'::'externals/discord-rpc'
      'yuzu-mirror.dynarmic'::'externals/dynarmic'
      'yuzu-mirror.mbedtls'::'externals/mbedtls'
      'yuzu-mirror.oaknut'::'externals/oaknut'
      'yuzu-mirror.sirit'::'externals/sirit'
    )
    _submodule_update
  )
}
_source_bylaws_libadrenotools() {
  local _sources_add=(
    'bylaws.liblinkernsbypass'::'git+https://github.com/bylaws/liblinkernsbypass.git'
  )

  local _p
  for _p in ${_sources_add[@]}; do
    source+=("$_p")
    sha256sums+=('SKIP')
  done

  _prepare_bylaws_libadrenotools() (
    cd "$srcdir/$_pkgsrc"
    cd 'externals/libadrenotools'
    local _submodules=(
      'bylaws.liblinkernsbypass'::'lib/linkernsbypass'
    )
    _submodule_update
  )
}

_source_lat9nq_tzdb_to_nx() {
  local _sources_add=(
    'eggert.tz'::'git+https://github.com/eggert/tz.git'
  )

  local _p
  for _p in ${_sources_add[@]}; do
    source+=("$_p")
    sha256sums+=('SKIP')
  done

  _prepare_lat9nq_tzdb_to_nx() (
    cd "$srcdir/$_pkgsrc"
    cd 'externals/nx_tzdb/tzdb_to_nx'
    local _submodules=(
      'eggert.tz'::'externals/tz/tz'
    )
    _submodule_update
  )
}

_source_yuzu_mirror_sirit() {
  local _sources_add=(
    'khronosgroup.spirv-headers'::'git+https://github.com/KhronosGroup/SPIRV-Headers.git'
  )

  local _p
  for _p in ${_sources_add[@]}; do
    source+=("$_p")
    sha256sums+=('SKIP')
  done

  _prepare_yuzu_mirror_sirit() (
    cd "$srcdir/$_pkgsrc"
    cd 'externals/sirit'
    local _submodules=(
      'khronosgroup.spirv-headers'::'externals/SPIRV-Headers'
    )
    _submodule_update
  )
}

_source_main
_source_citron
_source_bylaws_libadrenotools
_source_lat9nq_tzdb_to_nx
_source_yuzu_mirror_sirit

prepare() {
  _submodule_update() {
    local _module
    for _module in "${_submodules[@]}"; do
      git submodule init "${_module##*::}"
      git submodule set-url "${_module##*::}" "$srcdir/${_module%%::*}"
      git -c protocol.file.allow=always submodule update "${_module##*::}"
    done
  }
  _run_if_exists _prepare_citron
  _run_if_exists _prepare_bylaws_libadrenotools
  _run_if_exists _prepare_lat9nq_tzdb_to_nx
  _run_if_exists _prepare_yuzu_mirror_sirit

  # fixes for boost 1.87
  sed -E 's&\bio_service\b&io_context&g' \
    -i "$_pkgsrc"/src/input_common/drivers/udp_client.cpp

  sed -E '/async_pipe\.hpp/s&^#include.*$&#include <boost/process/v1/async_pipe.hpp>&' \
    -i "$_pkgsrc"/src/core/debugger/debugger.cpp

  # warn instead of error
  find "$_pkgsrc/src" -name "CMakeLists.txt" -exec sed -E '/Werror=/d' -i {} \;
}

pkgver() {
  cd "$_pkgsrc"
  git describe --long --tags --abbrev=7 \
    | sed -E 's/^[^0-9]*//;s/-[^g][a-z\-]+-/-/;s/([^-]*-g)/r\1/;s/-/./g'
}

build() (
  export CMAKE_POLICY_VERSION_MINIMUM=3.5

  local _cmake_options=(
    -S "$_pkgsrc"
    -B build
    -G Ninja
    -DCMAKE_BUILD_TYPE=None
    -DCMAKE_INSTALL_PREFIX="/usr"

    -DENABLE_QT6=ON
    -DENABLE_QT_TRANSLATION=OFF
    -DCITRON_USE_QT_MULTIMEDIA=ON
    -DCITRON_USE_QT_WEB_ENGINE=ON

    -DCITRON_CHECK_SUBMODULES=OFF

    -DCITRON_USE_BUNDLED_FFMPEG=OFF
    -DCITRON_USE_BUNDLED_QT=OFF
    -DCITRON_USE_BUNDLED_SDL2=OFF
    -DCITRON_USE_BUNDLED_VCPKG=OFF

    -DCITRON_USE_EXTERNAL_SDL2=OFF
    -DCITRON_USE_EXTERNAL_VULKAN_HEADERS=ON
    -DCITRON_USE_EXTERNAL_VULKAN_UTILITY_LIBRARIES=ON

    -DCITRON_USE_FASTER_LD=OFF

    -DENABLE_WEB_SERVICE=ON
    -DUSE_DISCORD_PRESENCE=OFF
    -DCITRON_DOWNLOAD_TIME_ZONE_DATA=ON

    -DENABLE_COMPATIBILITY_LIST_DOWNLOAD=ON

    -DBUILD_REPOSITORY=citron/citron
    -DTITLE_BAR_FORMAT_IDLE="citron | ${pkgver} {}"
    -DTITLE_BAR_FORMAT_RUNNING="citron | ${pkgver} {}"

    -DCITRON_ENABLE_COMPATIBILITY_REPORTING=OFF
    -DCITRON_ROOM=ON

    -DCITRON_ENABLE_LTO=ON
    -DCITRON_CRASH_DUMPS=OFF
    -DCITRON_TESTS=OFF

    -DUSE_SANITIZERS=OFF # cubeb
    -Wno-dev
  )

  cmake "${_cmake_options[@]}"
  cmake --build build
)

package() {
  DESTDIR="$pkgdir" cmake --install build
}

_run_if_exists() {
  if declare -F "$1" > /dev/null; then
    eval "$1"
  fi
}
