# Maintainer: aur.chaotic.cx

## options
: ${_electron_version=}
: ${_nodeversion=}
: ${_install_path:=usr/share}

_pkgname="youtube-music"
pkgname="$_pkgname-git"
pkgver=3.10.0.r126.g94b789a
pkgrel=1
pkgdesc="Unofficial desktop app for YouTube Music"
url="https://github.com/th-ch/youtube-music"
license=('MIT')
arch=('x86_64')

depends=(
  "electron${_electron_version:-}"
  'libsecret'
)
makedepends=(
  'git'
  'nvm'
)

provides=("$_pkgname")
conflicts=("$_pkgname")

_pkgsrc="$_pkgname"
source=("$_pkgsrc"::"git+$url.git")
sha256sums=('SKIP')

_nvm_env() {
  export HOME="$SRCDEST/node-home"
  export NVM_DIR="$SRCDEST/node-nvm"

  # set up nvm
  source /usr/share/nvm/init-nvm.sh || [[ $? != 1 ]]
  nvm install ${_nodeversion:-node}
  nvm use ${_nodeversion:-node}
}

_electron_env() {
  export SYSTEM_ELECTRON_VERSION=$(< "/usr/lib/electron${_electron_version:-}/version")
  export ELECTRON_VERSION=${SYSTEM_ELECTRON_VERSION%%.*}
}

prepare() {
  _electron_env

  # set electron version
  sed -E \
    -e 's&^(\s*)"(electron)": "(.*)"(,?)$&\1"\2": "'"$SYSTEM_ELECTRON_VERSION"'"\4&' \
    -i "$_pkgsrc/package.json"

  # allow any npm/node version
  sed -E \
    -e 's&^(\s*)"(npm|node|pnpm)": "(.*)"(,?)$&\1"\2": ">=1.0.0"\4&' \
    -i "$_pkgsrc/package.json"
}

pkgver() {
  cd "${pkgname%-git}"
  git describe --long --tags --abbrev=7 --exclude='*[a-zA-Z][a-zA-Z]*' \
    | sed -E 's/^[^0-9]*//;s/([^-]*-g)/r\1/;s/-/./g'
}

build() (
  _nvm_env
  _electron_env

  export ELECTRON_SKIP_BINARY_DOWNLOAD=1

  local _builder_options=(
    -c.electronDist="'/usr/lib/electron${ELECTRON_VERSION:-}'"
    -c.electronVersion=${SYSTEM_ELECTRON_VERSION}
  )

  cd "$_pkgsrc"
  npm install --no-audit --no-fund -g pnpm
  pnpm set config audit false
  pnpm set config fund false
  pnpm update
  pnpm install
  pnpm clean
  pnpm build
  pnpm exec sh -c "electron-builder --linux --dir --publish never ${_builder_options[@]}"
)

package() {
  _electron_env
  depends=("electron${ELECTRON_VERSION:-}")

  install -Dm644 "$_pkgsrc/pack/linux-unpacked/resources/app.asar" -t "$pkgdir/$_install_path/$_pkgname/"
  cp -r "$_pkgsrc/pack/linux-unpacked/resources/app.asar.unpacked" "$pkgdir/$_install_path/$_pkgname/"

  install -Dm644 "$_pkgsrc/assets/generated/icons/png/1024x1024.png" "$pkgdir/usr/share/pixmaps/$_pkgname.png"
  install -Dm644 "$_pkgsrc/license" -t "$pkgdir/usr/share/licenses/$pkgname/"

  install -Dm644 /dev/stdin "$pkgdir/usr/share/applications/$_pkgname.desktop" << END
[Desktop Entry]
Type=Application
Name=YouTube Music
Exec=$_pkgname
Icon=$_pkgname
Comment=$_pkgdesc
Terminal=false
StartupWMClass=com.github.th_ch.youtube_music
Categories=AudioVideo;
END

  install -Dm755 /dev/stdin "$pkgdir/usr/bin/$_pkgname" << END
#!/usr/bin/env bash

set -euo pipefail

name=$_pkgname
flags_file="\${XDG_CONFIG_HOME:-\$HOME/.config}/\${name}-flags.conf"

lines=()
if [[ -f "\${flags_file}" ]]; then
  mapfile -t lines < "\${flags_file}"
fi

flags=()
for line in "\${lines[@]}"; do
  if [[ ! "\${line}" =~ ^[[:space:]]*#.* ]] && [[ -n "\${line}" ]]; then
    flags+=("\${line}")
  fi
done

: \${ELECTRON_IS_DEV:=0}
export ELECTRON_IS_DEV
: \${ELECTRON_FORCE_IS_PACKAGED:=true}
export ELECTRON_FORCE_IS_PACKAGED

exec electron${ELECTRON_VERSION:-} "\${flags[@]}" "/$_install_path/$_pkgname/app.asar" "\$@"
END
}
