# Maintainer:

## links
# http://vub63vv26q6v27xzv2dtcd25xumubshogm67yrpaz2rculqxs7jlfqad.onion/torzu-emu/torzu

## options
: ${_build_avx:=false}

unset _pkgtype
_pkgtype+="-qt6"
[[ "${_build_avx::1}" == "t" ]] && _pkgtype+="-avx"
_pkgtype+="-git"

## basic info
_pkgname="torzu"
pkgname="$_pkgname${_pkgtype:-}"
pkgver=2024.08.10.r7.g7b143fb
pkgrel=1
pkgdesc="Yet another emulator fork"
url="https://notabug.org/litucks/torzu"
license=('GPL-3.0-or-later')
arch=('x86_64')

depends=(
  'ffmpeg'
  'qt6-multimedia'
  'qt6-webengine'
  'sdl2'
)
makedepends=(
  'catch2'
  'cmake'
  'git'
  'glslang'
  'ninja'
  'nlohmann-json'
  'qt6-tools'
  'rapidjson'
  'robin-map'
  'stb'

  'spirv-headers'
  'spirv-tools'
  'vulkan-headers'
  'vulkan-utility-libraries'
)

provides=(
  "$_pkgname"
  'yuzu'
)
conflicts=(
  "$_pkgname"
  'yuzu'
)

options=('!lto')

_source_main() {
  _pkgsrc="torzu.notabug"
  source=("$_pkgsrc"::"git+$url.git")
  sha256sums=('SKIP')
}

_source_boost() {
  _pkgver_boost="1.85.0"
  _pkgname_boost="boost_${_pkgver_boost//./_}"

  source+=("https://boostorg.jfrog.io/artifactory/main/release/$_pkgver_boost/source/$_pkgname_boost.tar.bz2")
  sha256sums+=('SKIP')

  _build_boost() {
    local JOBS="$(sed 's/.*\(-j *[0-9]\+\).*/\1/' <<< $MAKEFLAGS)"
    local python_version=$(python -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')

    pushd "$_pkgname_boost/tools/build"
    ./bootstrap.sh --cxxflags="$CXXFLAGS $LDFLAGS"
    ./b2 install --prefix="$srcdir"/deps
    ln -s b2 "$srcdir"/deps/bin/bjam
    popd

    cd "$_pkgname_boost"
    ./bootstrap.sh --with-toolset=gcc --with-icu --with-python=python3

    # support for OpenMPI
    echo "using mpi ;" >> project-config.jam

    # boostbook is needed by quickbook
    install -dm755 "$srcdir"/deps/share/boostbook
    cp -a tools/boostbook/{xsl,dtd} "$srcdir"/deps/share/boostbook/

    # install to $srcdir/deps
    ./b2 install \
      variant=release \
      debug-symbols=off \
      threading=multi \
      runtime-link=static \
      link=static \
      toolset=gcc \
      python=$python_version \
      cflags="$CPPFLAGS $CFLAGS -fPIC -O3 -ffat-lto-objects" \
      cxxflags="$CPPFLAGS $CXXFLAGS -fPIC -O3 -ffat-lto-objects" \
      linkflags="$LDFLAGS" \
      --layout=system \
      $JOBS \
      \
      --prefix="$srcdir"/deps
  }
}

_source_torzu() {
  source+=(
    'arun11299.cpp-jwt'::'git+https://github.com/arun11299/cpp-jwt.git'
    'brofield.simpleini'::'git+https://github.com/brofield/simpleini.git'
    'bylaws.libadrenotools'::'git+https://github.com/bylaws/libadrenotools.git'
    #'ffmpeg'::'git+https://github.com/FFmpeg/FFmpeg.git'
    'fmtlib.fmt'::'git+https://github.com/fmtlib/fmt.git'
    'gpuopen-librariesandsdks.vulkanmemoryallocator'::'git+https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator.git'
    'herumi.xbyak'::'git+https://github.com/herumi/xbyak.git'
    #'khronosgroup.spirv-headers'::'git+https://github.com/KhronosGroup/SPIRV-Headers.git'
    #'khronosgroup.spirv-tools'::'git+https://github.com/KhronosGroup/SPIRV-Tools.git'
    #'khronosgroup.vulkan-headers'::'git+https://github.com/KhronosGroup/Vulkan-Headers.git'
    #'khronosgroup.vulkan-utility-libraries'::'git+https://github.com/KhronosGroup/Vulkan-Utility-Libraries.git'
    'lat9nq.tzdb_to_nx'::'git+https://github.com/lat9nq/tzdb_to_nx.git'
    #'libsdl-org.sdl'::'git+https://github.com/libsdl-org/SDL.git'
    'libusb'::'git+https://github.com/libusb/libusb.git'
    'lsalzman.enet'::'git+https://github.com/lsalzman/enet.git'
    'merryhime.oaknut'::'git+https://github.com/merryhime/oaknut.git'
    #'microsoft.vcpkg'::'git+https://github.com/microsoft/vcpkg.git'
    'mozilla.cubeb'::'git+https://github.com/mozilla/cubeb.git'
    'xiph.opus'::'git+https://github.com/xiph/opus.git'
    'yhirose.cpp-httplib'::'git+https://github.com/yhirose/cpp-httplib.git'
  )
  sha256sums+=(
    #'SKIP'
    #'SKIP'
    #'SKIP'
    #'SKIP'
    #'SKIP'
    #'SKIP'
    #'SKIP'
    'SKIP'
    'SKIP'
    'SKIP'
    'SKIP'
    'SKIP'
    'SKIP'
    'SKIP'
    'SKIP'
    'SKIP'
    'SKIP'
    'SKIP'
    'SKIP'
    'SKIP'
  )

  _prepare_torzu() (
    cd "$srcdir/$_pkgsrc"
    local _submodules=(
      'arun11299.cpp-jwt'::'externals/cpp-jwt'
      'brofield.simpleini'::'externals/simpleini'
      'bylaws.libadrenotools'::'externals/libadrenotools'
      #'ffmpeg'::'externals/ffmpeg/ffmpeg'
      'fmtlib.fmt'::'externals/fmt'
      'gpuopen-librariesandsdks.vulkanmemoryallocator'::'externals/VulkanMemoryAllocator'
      'herumi.xbyak'::'externals/xbyak'
      #'khronosgroup.spirv-headers'::'externals/SPIRV-Headers'
      #'khronosgroup.spirv-tools'::'externals/SPIRV-Tools'
      #'khronosgroup.vulkan-headers'::'externals/Vulkan-Headers'
      #'khronosgroup.vulkan-utility-libraries'::'externals/Vulkan-Utility-Libraries'
      'lat9nq.tzdb_to_nx'::'externals/nx_tzdb/tzdb_to_nx'
      #'libsdl-org.sdl'::'externals/SDL'
      'libusb'::'externals/libusb/libusb'
      'lsalzman.enet'::'externals/enet'
      'merryhime.oaknut'::'externals/oaknut'
      #'microsoft.vcpkg'::'externals/vcpkg'
      'mozilla.cubeb'::'externals/cubeb'
      'xiph.opus'::'externals/opus'
      'yhirose.cpp-httplib'::'externals/cpp-httplib'
    )
    _submodule_update
  )
}

_source_bylaws_libadrenotools() {
  source+=(
    'bylaws.liblinkernsbypass'::'git+https://github.com/bylaws/liblinkernsbypass.git'
  )
  sha256sums+=(
    'SKIP'
  )

  _prepare_bylaws_libadrenotools() (
    cd "$srcdir/$_pkgsrc"
    cd 'externals/libadrenotools'
    local _submodules=(
      'bylaws.liblinkernsbypass'::'lib/linkernsbypass'
    )
    _submodule_update
  )
}

_source_lat9nq_tzdb_to_nx() {
  source+=(
    'eggert.tz'::'git+https://github.com/eggert/tz.git'
  )
  sha256sums+=(
    'SKIP'
  )

  _prepare_lat9nq_tzdb_to_nx() (
    cd "$srcdir/$_pkgsrc"
    cd 'externals/nx_tzdb/tzdb_to_nx'
    local _submodules=(
      'eggert.tz'::'externals/tz/tz'
    )
    _submodule_update
  )
}

_source_mozilla_cubeb() {
  source+=(
    'arsenm.sanitizers-cmake'::'git+https://github.com/arsenm/sanitizers-cmake.git'
    'google.googletest'::'git+https://github.com/google/googletest.git'
  )
  sha256sums+=(
    'SKIP'
    'SKIP'
  )

  _prepare_mozilla_cubeb() (
    cd "$srcdir/$_pkgsrc"
    cd 'externals/cubeb'
    local _submodules=(
      'arsenm.sanitizers-cmake'::'cmake/sanitizers-cmake'
      'google.googletest'::'googletest'
    )
    _submodule_update
  )
}

_source_main
_source_boost
_source_torzu
_source_bylaws_libadrenotools
_source_lat9nq_tzdb_to_nx
_source_mozilla_cubeb

prepare() {
  _submodule_update() {
    local _module
    for _module in "${_submodules[@]}"; do
      git submodule init "${_module##*::}"
      git submodule set-url "${_module##*::}" "$srcdir/${_module%::*}"
      git -c protocol.file.allow=always submodule update "${_module##*::}"
    done
  }

  _prepare_torzu
  _prepare_bylaws_libadrenotools
  _prepare_lat9nq_tzdb_to_nx
  _prepare_mozilla_cubeb

  sed -E -e '/find_package.*fmt/d' \
    -i "$_pkgsrc/externals/CMakeLists.txt" \
    "$_pkgsrc/CMakeLists.txt"
}

pkgver() {
  cd "$_pkgsrc"
  git describe --long --tags --abbrev=7 --exclude='*[a-zA-Z][a-zA-Z]*' \
    | sed -E 's/^[^0-9]*//;s/([^-]*-g)/r\1/;s/-/./g'
}

_build_torzu() {
  local _cmake_options=(
    -S "$_pkgsrc"
    -B build
    -G Ninja
    -DCMAKE_BUILD_TYPE="Release"
    -DCMAKE_INSTALL_PREFIX="/usr"

    -DENABLE_QT6=ON
    -DENABLE_QT_TRANSLATION=OFF
    -DYUZU_USE_BUNDLED_QT=OFF
    -DYUZU_USE_QT_MULTIMEDIA=ON
    -DYUZU_USE_QT_WEB_ENGINE=ON

    -DYUZU_CHECK_SUBMODULES=OFF

    -DYUZU_USE_BUNDLED_FFMPEG=OFF
    -DYUZU_USE_BUNDLED_SDL2=OFF
    -DYUZU_USE_BUNDLED_VCPKG=OFF

    -DYUZU_USE_EXTERNAL_SDL2=OFF
    -DYUZU_USE_EXTERNAL_VULKAN_HEADERS=OFF
    -DYUZU_USE_EXTERNAL_VULKAN_SPIRV_TOOLS=OFF
    -DYUZU_USE_EXTERNAL_VULKAN_UTILITY_LIBRARIES=OFF

    -DYUZU_USE_FASTER_LD=OFF

    -DUSE_DISCORD_PRESENCE=OFF
    -DYUZU_DOWNLOAD_TIME_ZONE_DATA=ON

    -DENABLE_COMPATIBILITY_LIST_DOWNLOAD=ON

    -DBUILD_REPOSITORY=litucks/torzu
    -DTITLE_BAR_FORMAT_IDLE="torzu | ${pkgver} {}"
    -DTITLE_BAR_FORMAT_RUNNING="torzu | ${pkgver} {}"

    -DYUZU_ENABLE_COMPATIBILITY_REPORTING=OFF
    -DYUZU_ROOM=OFF

    -DYUZU_ENABLE_LTO=ON
    -DYUZU_CRASH_DUMPS=OFF
    -DYUZU_TESTS=OFF

    -DBoost_INCLUDE_DIR="$srcdir/deps/include"
    -Wno-dev
  )

  cmake "${_cmake_options[@]}"
  cmake --build build
}

build() {
  if [[ "${_build_avx::1}" == "t" ]]; then
    CFLAGS="$(echo "$CFLAGS" | sed -E 's@(\s*-(march|mtune)=\S+\s*)@ @g;s@\s*-O[0-9]\s*@ @g;s@\s+@ @g') -march=x86-64-v3 -mtune=generic -O3"
    CXXFLAGS="$(echo "$CXXFLAGS" | sed -E 's@(\s*-(march|mtune)=\S+\s*)@ @g;s@\s*-O[0-9]\s*@ @g;s@\s+@ @g') -march=x86-64-v3 -mtune=generic -O3"
  fi

  (_build_boost)
  (_build_torzu)
}

package() {
  DESTDIR="$pkgdir" cmake --install build
  #install -Dm644 "$_pkgsrc/dist/72-yuzu-input.rules" -t "$pkgdir/usr/lib/udev/rules.d/"
}
