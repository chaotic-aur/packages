# Maintainer: aur.chaotic.cx

## links
# http://vub63vv26q6v27xzv2dtcd25xumubshogm67yrpaz2rculqxs7jlfqad.onion/torzu-emu/torzu

: ${_build_level:=1}

export CMAKE_POLICY_VERSION_MINIMUM=3.5

unset _pkgtype
_pkgtype+="-qt6"
[[ "${_build_level::1}" == "2" ]] && _pkgtype+="-x64v2"
[[ "${_build_level::1}" == "3" ]] && _pkgtype+="-avx"
[[ "${_build_level::1}" == "4" ]] && _pkgtype+="-x64v4"
_pkgtype+="-git"

_pkgname="torzu"
pkgname="$_pkgname${_pkgtype:-}"
pkgver=2024.08.10.r66.g125f4e2
pkgrel=1
pkgdesc="Yet another emulator fork"
url="https://notabug.org/litucks/torzu"
license=('GPL-3.0-or-later')
arch=('x86_64' 'x86_64_v2' 'x86_64_v3' 'x86_64_v4')

depends=(
  'ffmpeg'
  'qt6-multimedia'
  'qt6-webengine'
  'sdl2'
)
makedepends=(
  'boost'
  'cmake'
  'git'
  'glslang'
  'ninja'
  'nlohmann-json'
  'qt6-tools'
  'rapidjson'
  'robin-map'
  'stb'

  'spirv-headers'
  'spirv-tools'
  'vulkan-headers'
  'vulkan-utility-libraries'

  # cubeb
  'alsa-lib'
  'jack'
  'libpulse'
  'sndio'
  'speexdsp'
)

provides=(
  "$_pkgname"
  'yuzu'
)
conflicts=(
  "$_pkgname"
  'yuzu'
)

_source_main() {
  _pkgsrc="torzu.notabug"
  source=("$_pkgsrc"::"git+$url.git")
  sha256sums=('SKIP')
}

_source_torzu() {
  local _sources_add=(
    'arun11299.cpp-jwt'::'git+https://github.com/arun11299/cpp-jwt.git'
    'brofield.simpleini'::'git+https://github.com/brofield/simpleini.git'
    'bylaws.libadrenotools'::'git+https://github.com/bylaws/libadrenotools.git'
    #'ffmpeg'::'git+https://github.com/FFmpeg/FFmpeg.git'
    'fmtlib.fmt'::'git+https://github.com/fmtlib/fmt.git'
    'gpuopen-librariesandsdks.vulkanmemoryallocator'::'git+https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator.git'
    'herumi.xbyak'::'git+https://github.com/herumi/xbyak.git'
    #'khronosgroup.spirv-headers'::'git+https://github.com/KhronosGroup/SPIRV-Headers.git'
    #'khronosgroup.spirv-tools'::'git+https://github.com/KhronosGroup/SPIRV-Tools.git'
    #'khronosgroup.vulkan-headers'::'git+https://github.com/KhronosGroup/Vulkan-Headers.git'
    #'khronosgroup.vulkan-utility-libraries'::'git+https://github.com/KhronosGroup/Vulkan-Utility-Libraries.git'
    'lat9nq.tzdb_to_nx'::'git+https://github.com/lat9nq/tzdb_to_nx.git'
    #'libsdl-org.sdl'::'git+https://github.com/libsdl-org/SDL.git'
    'libusb'::'git+https://github.com/libusb/libusb.git'
    'lsalzman.enet'::'git+https://github.com/lsalzman/enet.git'
    'merryhime.oaknut'::'git+https://github.com/merryhime/oaknut.git'
    #'microsoft.vcpkg'::'git+https://github.com/microsoft/vcpkg.git'
    'mozilla.cubeb'::'git+https://github.com/mozilla/cubeb.git'
    'xiph.opus'::'git+https://github.com/xiph/opus.git'
    'yhirose.cpp-httplib'::'git+https://github.com/yhirose/cpp-httplib.git'
  )

  local _p
  for _p in ${_sources_add[@]}; do
    source+=("$_p")
    sha256sums+=('SKIP')
  done

  _prepare_torzu() (
    cd "$srcdir/$_pkgsrc"
    local _submodules=(
      'arun11299.cpp-jwt'::'externals/cpp-jwt'
      'brofield.simpleini'::'externals/simpleini'
      'bylaws.libadrenotools'::'externals/libadrenotools'
      #'ffmpeg'::'externals/ffmpeg/ffmpeg'
      'fmtlib.fmt'::'externals/fmt'
      'gpuopen-librariesandsdks.vulkanmemoryallocator'::'externals/VulkanMemoryAllocator'
      'herumi.xbyak'::'externals/xbyak'
      #'khronosgroup.spirv-headers'::'externals/SPIRV-Headers'
      #'khronosgroup.spirv-tools'::'externals/SPIRV-Tools'
      #'khronosgroup.vulkan-headers'::'externals/Vulkan-Headers'
      #'khronosgroup.vulkan-utility-libraries'::'externals/Vulkan-Utility-Libraries'
      'lat9nq.tzdb_to_nx'::'externals/nx_tzdb/tzdb_to_nx'
      #'libsdl-org.sdl'::'externals/SDL'
      'libusb'::'externals/libusb/libusb'
      'lsalzman.enet'::'externals/enet'
      'merryhime.oaknut'::'externals/oaknut'
      #'microsoft.vcpkg'::'externals/vcpkg'
      'mozilla.cubeb'::'externals/cubeb'
      'xiph.opus'::'externals/opus'
      'yhirose.cpp-httplib'::'externals/cpp-httplib'
    )
    _submodule_update
  )
}

_source_bylaws_libadrenotools() {
  local _sources_add=(
    'bylaws.liblinkernsbypass'::'git+https://github.com/bylaws/liblinkernsbypass.git'
  )

  local _p
  for _p in ${_sources_add[@]}; do
    source+=("$_p")
    sha256sums+=('SKIP')
  done

  _prepare_bylaws_libadrenotools() (
    cd "$srcdir/$_pkgsrc"
    cd 'externals/libadrenotools'
    local _submodules=(
      'bylaws.liblinkernsbypass'::'lib/linkernsbypass'
    )
    _submodule_update
  )
}

_source_lat9nq_tzdb_to_nx() {
  local _sources_add=(
    'eggert.tz'::'git+https://github.com/eggert/tz.git'
  )

  local _p
  for _p in ${_sources_add[@]}; do
    source+=("$_p")
    sha256sums+=('SKIP')
  done

  _prepare_lat9nq_tzdb_to_nx() (
    cd "$srcdir/$_pkgsrc"
    cd 'externals/nx_tzdb/tzdb_to_nx'
    local _submodules=(
      'eggert.tz'::'externals/tz/tz'
    )
    _submodule_update
  )
}

_source_main
_source_torzu
_source_bylaws_libadrenotools
_source_lat9nq_tzdb_to_nx

prepare() {
  _submodule_update() {
    local _module
    for _module in "${_submodules[@]}"; do
      git submodule init "${_module##*::}"
      git submodule set-url "${_module##*::}" "$srcdir/${_module%::*}"
      git -c protocol.file.allow=always submodule update "${_module##*::}"
    done
  }

  _prepare_torzu
  _prepare_bylaws_libadrenotools
  _prepare_lat9nq_tzdb_to_nx

  # use vendor fmt
  sed -E -e '/find_package.*fmt/d' \
    -i "$_pkgsrc/externals/CMakeLists.txt" \
    "$_pkgsrc/CMakeLists.txt"
}

pkgver() {
  cd "$_pkgsrc"
  git describe --long --tags --abbrev=7 --exclude='*[a-zA-Z][a-zA-Z]*' \
    | sed -E 's/^[^0-9]*//;s/([^-]*-g)/r\1/;s/-/./g'
}

build() {
  if [[ ${_build_level::1} =~ ^[2-4]$ ]]; then
    export CFLAGS CXXFLAGS
    local _cflags _cxxflags
    _cflags=(
      -march=x86-64-v${_build_level::1} -O3
      $(sed -E -e 's&-(march|mtune)=\S+\b&&g' -e 's&-O[0-9]+\b&&g' <<< "${CFLAGS}")
    )
    CFLAGS="${_cflags[@]}"

    _cxxflags=(
      -march=x86-64-v${_build_level::1} -O3
      $(sed -E -e 's&-(march|mtune)=\S+\b&&g' -e 's&-O[0-9]+\b&&g' <<< "${CXXFLAGS}")
    )
    CXXFLAGS="${_cxxflags[@]}"
  fi

  local _cmake_options=(
    -S "$_pkgsrc"
    -B build
    -G Ninja
    -DCMAKE_BUILD_TYPE="Release"
    -DCMAKE_INSTALL_PREFIX="/usr"

    -DENABLE_QT6=ON
    -DENABLE_QT_TRANSLATION=OFF
    -DYUZU_USE_BUNDLED_QT=OFF
    -DYUZU_USE_QT_MULTIMEDIA=ON
    -DYUZU_USE_QT_WEB_ENGINE=ON

    -DYUZU_CHECK_SUBMODULES=OFF

    -DYUZU_USE_BUNDLED_FFMPEG=OFF
    -DYUZU_USE_BUNDLED_SDL2=OFF
    -DYUZU_USE_BUNDLED_VCPKG=OFF

    -DYUZU_USE_EXTERNAL_SDL2=OFF
    -DYUZU_USE_EXTERNAL_VULKAN_HEADERS=OFF
    -DYUZU_USE_EXTERNAL_VULKAN_SPIRV_TOOLS=OFF
    -DYUZU_USE_EXTERNAL_VULKAN_UTILITY_LIBRARIES=OFF

    -DYUZU_USE_FASTER_LD=OFF

    -DUSE_DISCORD_PRESENCE=OFF
    -DYUZU_DOWNLOAD_TIME_ZONE_DATA=ON

    -DENABLE_COMPATIBILITY_LIST_DOWNLOAD=ON

    -DBUILD_REPOSITORY=litucks/torzu
    -DTITLE_BAR_FORMAT_IDLE="torzu | ${pkgver} {}"
    -DTITLE_BAR_FORMAT_RUNNING="torzu | ${pkgver} {}"

    -DYUZU_ENABLE_COMPATIBILITY_REPORTING=OFF
    -DYUZU_ROOM=OFF

    -DYUZU_ENABLE_LTO=ON
    -DYUZU_CRASH_DUMPS=OFF
    -DYUZU_TESTS=OFF

    -DUSE_SANITIZERS=OFF # cubeb
    -Wno-dev
  )

  cmake "${_cmake_options[@]}"
  cmake --build build
}

package() {
  DESTDIR="$pkgdir" cmake --install build
}
