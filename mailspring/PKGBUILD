# Maintainer: aur.chaotic.cx

: ${_electron_version=}
: ${_nodeversion=}
: ${_install_path:=usr/lib}

_pkgname="mailspring"
pkgname="$_pkgname"
pkgver=1.16.0
pkgrel=3
pkgdesc="A beautiful and fast mail client"
url="https://github.com/Foundry376/Mailspring"
license=('GPL-3.0-only')
arch=('x86_64')

depends=(
  "electron${_electron_version:-}"
)
makedepends=(
  'git'
  'nvm'
  'grunt-cli'
  'python'
  'patchelf'
)

_pkgsrc="$_pkgname"
source=("$_pkgsrc"::"git+$url.git#tag=${pkgver}")
sha256sums=('SKIP')

_nvm_env() {
  export HOME="$SRCDEST/node-home"
  export NVM_DIR="$SRCDEST/node-nvm"

  # set up nvm
  source /usr/share/nvm/init-nvm.sh || [[ $? != 1 ]]
  nvm install ${_nodeversion:-node}
  nvm use ${_nodeversion:-node}
}

_electron_env() {
  export ELECTRON_SKIP_BINARY_DOWNLOAD=1

  export SYSTEM_ELECTRON_VERSION=$(< "/usr/lib/electron${_electron_version:-}/version")
  export ELECTRON_VERSION=${SYSTEM_ELECTRON_VERSION%%.*}
}

prepare() {
  _electron_env

  cd "$_pkgsrc"

  # set electron version
  sed -E \
    -e 's&^(\s*)("electron"): "(.*)"(,?)$&\1\2: "'"$SYSTEM_ELECTRON_VERSION"'"\4&' \
    -i "package.json" "app/package.json"

  # allow any npm version
  sed -E \
    -e 's&^(\s*)"(node|npm)": "(.*)"(,?)$&\1"\2": ">=1.0.0"\4&' \
    -i "package.json"

  # don't try to create deb or rpm
  sed -E -e 's&'", 'create-(deb|rpm)-installer'"'&&g' -i "app/build/Gruntfile.js"
}

build() (
  _nvm_env
  _electron_env

  cd "$_pkgsrc"
  npm install --no-audit --no-fund
  npm run-script build
)

package() {
  _electron_env

  depends=(
    "electron${ELECTRON_VERSION:-}"
    'db5.3'
    'gnome-keyring'
  )

  cd "$_pkgsrc"

  # resources
  mkdir -pm755 "${pkgdir}/$_install_path/$_pkgname"
  cp -r app/dist/mailspring-linux-x64/resources/* "$pkgdir/$_install_path/$_pkgname/"

  # fix rpath
  patchelf --set-rpath '$ORIGIN' "$pkgdir/$_install_path/$_pkgname/app.asar.unpacked/mailsync.bin"

  # icon
  install -Dm0644 "app/build/resources/linux/icons/512.png" "$pkgdir/usr/share/pixmaps/$_pkgname.png"

  # launcher
  install -Dm644 /dev/stdin "$pkgdir/usr/share/applications/$_pkgname.desktop" << END
$(
    sed -E \
      -e 's&<%= productName %>&'"${_pkgname^}"'&' \
      -e 's&<%= description %>&'"${pkgdesc}"'&' \
      "app/build/resources/linux/Mailspring.desktop.in"
  )
END

  # script
  install -Dm755 /dev/stdin "$pkgdir/usr/bin/$_pkgname" << END
#!/usr/bin/env bash

set -euo pipefail

name=$_pkgname
flags_file="\${XDG_CONFIG_HOME:-\$HOME/.config}/\${name}-flags.conf"

lines=()
if [[ -f "\${flags_file}" ]]; then
  mapfile -t lines < "\${flags_file}"
fi

flags=()
for line in "\${lines[@]}"; do
  if [[ ! "\${line}" =~ ^[[:space:]]*#.* ]] && [[ -n "\${line}" ]]; then
    flags+=("\${line}")
  fi
done

: \${ELECTRON_IS_DEV:=0}
export ELECTRON_IS_DEV
: \${ELECTRON_FORCE_IS_PACKAGED:=true}
export ELECTRON_FORCE_IS_PACKAGED

exec electron${ELECTRON_VERSION:-} "\${flags[@]}" "/$_install_path/$_pkgname/app.asar" --password-store="gnome-libsecret" "\$@"
END
}
