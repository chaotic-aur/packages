diff --git a/src/browser/app.cxx b/src/browser/app.cxx
index dcc8d3e..9b7a039 100644
--- a/src/browser/app.cxx
+++ b/src/browser/app.cxx
@@ -4,7 +4,7 @@
 #include "include/cef_values.h"
 #include "include/internal/cef_types.h"
 
-#include <fmt/core.h>
+//#include <fmt/core.h>
 
 #if defined(_WIN32)
 #include <Windows.h>
@@ -55,7 +55,7 @@ void PostPluginMessage(CefRefPtr<CefV8Context> context, CefRefPtr<CefProcessMess
 			post_message->ExecuteFunctionWithContext(context, nullptr, value_list);
 		}
 	} else {
-		fmt::print("[R] warning: window.postMessage is not a function, plugin message will be ignored\n");
+		//fmt::print("[R] warning: window.postMessage is not a function, plugin message will be ignored\n");
 	}
 }
 
@@ -82,7 +82,7 @@ CefRefPtr<CefLoadHandler> Browser::App::GetLoadHandler() {
 }
 
 void Browser::App::OnBrowserCreated(CefRefPtr<CefBrowser> browser, CefRefPtr<CefDictionaryValue> dict) {
-	fmt::print("[R] OnBrowserCreated for browser {}\n", browser->GetIdentifier());
+	//fmt::print("[R] OnBrowserCreated for browser {}\n", browser->GetIdentifier());
 	if (dict) {
 		if (dict->HasKey("launcher")) set_launcher_ui = dict->GetBool("launcher");
 		if (dict->HasKey("customjs")) {
@@ -110,11 +110,11 @@ void Browser::App::OnUncaughtException(
 	CefRefPtr<CefV8Exception> exception,
 	CefRefPtr<CefV8StackTrace> trace
 ) {
-	fmt::print("[R] unhandled exception in {}: {}\n", exception->GetScriptResourceName().ToString(), exception->GetMessage().ToString());
-	for (int i = 0; i < trace->GetFrameCount(); i += 1) {
-		CefRefPtr<CefV8StackFrame> frame = trace->GetFrame(i);
-		fmt::print("[R] in {}:{}:{}\n", frame->GetScriptName().ToString(), frame->GetLineNumber(), frame->GetColumn());
-	}
+	//fmt::print("[R] unhandled exception in {}: {}\n", exception->GetScriptResourceName().ToString(), exception->GetMessage().ToString());
+	//for (int i = 0; i < trace->GetFrameCount(); i += 1) {
+	//	CefRefPtr<CefV8StackFrame> frame = trace->GetFrame(i);
+	//	fmt::print("[R] in {}:{}:{}\n", frame->GetScriptName().ToString(), frame->GetLineNumber(), frame->GetColumn());
+	//}
 
 	constexpr int max_dist = 80;
 	std::string source_line = exception->GetSourceLine().ToString();
@@ -130,18 +130,18 @@ void Browser::App::OnUncaughtException(
 		source_view_trimmed.data() + (do_trim_end ? exc_end_column + max_dist : source_view_trimmed.size())
 	);
 
-	fmt::print("[R] {}{}{}\n[R] {}", do_trim_start ? "..." : "", code_trimmed, do_trim_end ? "..." : "", do_trim_start ? "---" : "");
-	int i = 0;
-	while (i < exc_start_column && i < max_dist) {
-		fmt::print("-");
-		i += 1;
-	}
-	i = 0;
-	while (i < exc_end_column - exc_start_column) {
-		fmt::print("^");
-		i += 1;
-	}
-	fmt::print("\n");
+	//fmt::print("[R] {}{}{}\n[R] {}", do_trim_start ? "..." : "", code_trimmed, do_trim_end ? "..." : "", do_trim_start ? "---" : "");
+	//int i = 0;
+	//while (i < exc_start_column && i < max_dist) {
+	//	fmt::print("-");
+	//	i += 1;
+	//}
+	//i = 0;
+	//while (i < exc_end_column - exc_start_column) {
+	//	fmt::print("^");
+	//	i += 1;
+	//}
+	//fmt::print("\n");
 }
 
 bool Browser::App::OnProcessMessageReceived(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, CefProcessId, CefRefPtr<CefProcessMessage> message) {
@@ -153,7 +153,7 @@ bool Browser::App::OnProcessMessageReceived(CefRefPtr<CefBrowser> browser, CefRe
 	}
 
 	if (name == "__bolt_clientlist") {
-		fmt::print("[R] handling client list\n");
+		//fmt::print("[R] handling client list\n");
 		CefRefPtr<CefV8Context> context = frame->GetV8Context();
 		context->Enter();
 		CefRefPtr<CefV8Value> post_message = context->GetGlobal()->GetValue("postMessage");
@@ -191,7 +191,7 @@ bool Browser::App::OnProcessMessageReceived(CefRefPtr<CefBrowser> browser, CefRe
 			CefV8ValueList value_list = {dict, CefV8Value::CreateString("*")};
 			post_message->ExecuteFunctionWithContext(context, nullptr, value_list);
 		} else {
-			fmt::print("[R] warning: window.postMessage is not a function, {} will be ignored\n", name.ToString());
+			//fmt::print("[R] warning: window.postMessage is not a function, {} will be ignored\n", name.ToString());
 		}
 		context->Exit();
 		return true;
@@ -240,12 +240,12 @@ bool Browser::App::OnProcessMessageReceived(CefRefPtr<CefBrowser> browser, CefRe
 					}
 					shm_fd = shm_open(path.c_str(), O_RDWR, 0644);
 					shm_file = mmap(NULL, size, PROT_READ, MAP_SHARED, shm_fd, 0);
-					fmt::print("[R] shm named-remap '{}' -> {}, {}\n", path, shm_fd, (unsigned long long)shm_file);
+					//fmt::print("[R] shm named-remap '{}' -> {}, {}\n", path, shm_fd, (unsigned long long)shm_file);
 				} else if (shm_inited) {
 					shm_file = mremap(shm_file, shm_length, size, MREMAP_MAYMOVE);
-					fmt::print("[R] shm unnamed-remap -> {} ({})\n", (unsigned long long)shm_file, errno);
+					//fmt::print("[R] shm unnamed-remap -> {} ({})\n", (unsigned long long)shm_file, errno);
 				} else {
-					fmt::print("[R] warning: shm not set up and wasn't provided with enough information to do setup; {} will be ignored\n", name.ToString());
+					//fmt::print("[R] warning: shm not set up and wasn't provided with enough information to do setup; {} will be ignored\n", name.ToString());
 					return true;
 				}
 #endif
@@ -273,11 +273,11 @@ bool Browser::App::OnProcessMessageReceived(CefRefPtr<CefBrowser> browser, CefRe
 			if (post_message->IsFunction()) {
 				post_message->ExecuteFunctionWithContext(context, nullptr, value_list);
 			} else {
-				fmt::print("[R] warning: window.postMessage is not a function, {} will be ignored\n", name.ToString());
+				//fmt::print("[R] warning: window.postMessage is not a function, {} will be ignored\n", name.ToString());
 			}
 			context->Exit();
 		} else {
-			fmt::print("[R] warning: too few arguments, {} will be ignored\n", name.ToString());
+			//fmt::print("[R] warning: too few arguments, {} will be ignored\n", name.ToString());
 		}
 
 		return true;
@@ -289,7 +289,7 @@ bool Browser::App::OnProcessMessageReceived(CefRefPtr<CefBrowser> browser, CefRe
 void Browser::App::OnLoadEnd(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, int) {
 	if (CefCurrentlyOn(TID_RENDERER)) {
 		if (frame->IsMain()) {
-			fmt::print("[R] OnLoadEnd for browser {}\n", browser->GetIdentifier());
+			//fmt::print("[R] OnLoadEnd for browser {}\n", browser->GetIdentifier());
 			this->loaded = true;
 			if (this->pending_plugin_messages.size()) {
 				CefRefPtr<CefV8Context> context = frame->GetV8Context();
@@ -305,7 +305,7 @@ void Browser::App::OnLoadEnd(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame>
 }
 
 void Browser::App::OnLoadError(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, ErrorCode, const CefString&, const CefString&) {
-	fmt::print("[R] OnLoadError\n");
+	//fmt::print("[R] OnLoadError\n");
 }
 
 bool Browser::App::Execute(const CefString&, CefRefPtr<CefV8Value>, const CefV8ValueList&, CefRefPtr<CefV8Value>& retval, CefString&) {
