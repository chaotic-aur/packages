url="https://gitlab.com/kicad/code/kicad"
license=('GPL-3.0-or-later')

makedepends+=('ninja')

provides=("kicad=$pkgver")
conflicts=("kicad")

unset install

prepare() {
  :
}

pkgver() {
  cd "$pkgname"
  git describe --long --tags --abbrev=7 --exclude='*[a-zA-Z][a-zA-Z]*' \
    | sed -E 's/^[^0-9]*//;s/([^-]*-g)/r\1/;s/-/./g'
}

build() {
  _check_status

  export CXXFLAGS+=" -fno-strict-aliasing"
  export LDFLAGS+=" -Wl,--copy-dt-needed-entries"

  local _cmake_options=(
    -B build
    -S "$pkgname"
    -G Ninja
    -DCMAKE_BUILD_TYPE=None
    -DCMAKE_INSTALL_PREFIX='/usr'
    -DCMAKE_INSTALL_LIBDIR='lib'
    -DKICAD_USE_EGL=ON
    -DBUILD_TESTING=OFF
    -Wno-dev
  )

  cmake "${_cmake_options[@]}"
  cmake --build build
}

package() {
  DESTDIR="$pkgdir" cmake --install build
}

_check_status() (
  cd "$pkgname"

  local _commit _url_ci _response _msg_err _success_ci
  _commit=$(git rev-parse HEAD)
  _url_ci="https://gitlab.com/kicad/code/kicad/-/commit/$_commit/pipelines"
  _response=$(curl -Ssf "$_url_ci")

  if grep -qo favicon_status_success <<< "$_response"; then
    _msg_err="Check-in success."
    _success_ci=true
  elif grep -qo favicon_status_failed <<< "$_response"; then
    _msg_err="Error: Check-in failed."
    _success_ci=false
  elif grep -qo favicon_status_running <<< "$_response"; then
    _msg_err="Error: Check-in running."
    _success_ci=false
  else
    _msg_err="Error: Check-in unknown."
    _success_ci=false
  fi

  echo "$_msg_err"
  echo "   $_url_ci"

  if [ "${_success_ci::1}" != "t" ]; then
    return 1
  fi
)
