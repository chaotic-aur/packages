# Maintainer: aur.chaotic.cx

_pkgname="cemu"
pkgname="$_pkgname-git"
pkgver=2.6.r6.gc4eab08
pkgrel=2
pkgdesc="A Wii U emulator"
url="https://github.com/cemu-project/Cemu"
license=('MPL-2.0')
arch=('x86_64')

depends=(
  'glib2'
  'glslang'
  'gtk3'
  'libbluetooth.so'             # bluez-libs
  'libboost_program_options.so' # boost-libs
  'libfmt.so'                   # fmt
  'libspeexdsp.so'              # speexdsp
  'libx11'
  'libzarchive.so' # zarchive
  'libzip.so'      # libzip
  'openssl'
  'pugixml'
  'sdl2'
  'spirv-tools'
  'wxwidgets-gtk3'
)
makedepends=(
  'boost'
  'clang'
  'cmake'
  'git'
  'glm'
  'glu'
  'libgl'
  'libpng'
  'nasm'
  'ninja'
  'rapidjson'
  'spirv-headers'
  'vulkan-headers'
  'wayland-protocols'

  # cubeb, no sound if not present
  'alsa-lib'
  'jack'
  'libpulse'
  'sndio'
  'speexdsp'
)
optdepends+=(
  'alsa-lib: for ALSA backend'
  'jack: for JACK backend'
  'libpulse: for PulseAudio backend'
  'sndio: for sndio backend'
)

provides=("$_pkgname=${pkgver%%.r*}")
conflicts=("$_pkgname")

_source_main() {
  _pkgsrc="$_pkgname"
  source=("$_pkgsrc"::"git+$url.git")
  sha256sums=('SKIP')
}

_source_cemu() {
  local _sources_add=(
    #'exzap.zarchive'::'git+https://github.com/Exzap/ZArchive.git'
    #'khronosgroup.vulkan-headers'::'git+https://github.com/KhronosGroup/Vulkan-Headers.git'
    #'microsoft.vcpkg'::'git+https://github.com/microsoft/vcpkg.git'
    'mozilla.cubeb'::'git+https://github.com/mozilla/cubeb.git'
    'ocornut.imgui'::'git+https://github.com/ocornut/imgui.git'
  )

  local _p
  for _p in ${_sources_add[@]}; do
    source+=("$_p")
    sha256sums+=('SKIP')
  done

  _prepare_cemu() (
    cd "$srcdir/$_pkgsrc"
    local _submodules=(
      #'exzap.zarchive'::'dependencies/ZArchive'
      #'khronosgroup.vulkan-headers'::'dependencies/Vulkan-Headers'
      #'microsoft.vcpkg'::'dependencies/vcpkg'
      'mozilla.cubeb'::'dependencies/cubeb'
      'ocornut.imgui'::'dependencies/imgui'
    )
    _submodule_update
  )
}

_source_main
_source_cemu

prepare() {
  _submodule_update() {
    local _module
    for _module in "${_submodules[@]}"; do
      git submodule init "${_module##*::}"
      git submodule set-url "${_module##*::}" "$srcdir/${_module%%::*}"
      git -c protocol.file.allow=always submodule update "${_module##*::}"
    done
  }

  _run_if_exists _prepare_cemu

  sed -e '/CMAKE_INTERPROCEDURAL_OPTIMIZATION/d' -i "$_pkgsrc/CMakeLists.txt"
  sed -e '/FMT_HEADER_ONLY/d' -i "$_pkgsrc/src/Common/precompiled.h"

  # fix share folder name
  sed -e '/roamingPath = GetAppDataRoamingPath/s&"Cemu"&"cemu"&' -i "$_pkgsrc/src/gui/CemuApp.cpp"
}

pkgver() {
  cd "$_pkgsrc"
  git describe --long --tags --abbrev=7 --exclude='*[a-zA-Z][a-zA-Z]*' \
    | sed -E 's/^[^0-9]*//;s/([^-]*-g)/r\1/;s/-/./g'
}

_build_cemu() (
  echo "Building cemu..."
  local _cmake_options=(
    -B build
    -S "$_pkgsrc"
    -G Ninja
    -DCMAKE_BUILD_TYPE=None
    -DALLOW_PORTABLE=OFF
    -DENABLE_DISCORD_RPC=OFF
    -DENABLE_VCPKG=OFF
    -DUSE_SANITIZERS=OFF # cubeb
    -Wno-dev
  )

  cmake "${_cmake_options[@]}"
  cmake --build build
)

build() (
  export CC CXX CFLAGS CXXFLAGS
  CC=clang
  CXX=clang++
  CFLAGS+=' -DNDEBUG'
  CXXFLAGS+=' -DNDEBUG'

  _run_if_exists _build_cemu
)

package() {
  local _exec_name="Cemu_none"

  install -dm755 "$pkgdir/usr/bin"
  mv "$_pkgsrc/bin/$_exec_name" "$pkgdir/usr/bin/$_pkgname"

  install -dm755 "$pkgdir/usr/share/$_pkgname"
  cp -a "$_pkgsrc"/bin/* "$pkgdir/usr/share/$_pkgname/"

  install -Dm644 "$_pkgsrc"/dist/linux/info.cemu.Cemu.png "$pkgdir/usr/share/pixmaps/$_pkgname.png"

  install -Dm644 /dev/stdin "$pkgdir/usr/share/applications/$_pkgname.desktop" << END
[Desktop Entry]
Type=Application
Name=${_pkgname^}
Icon=$_pkgname
Exec=$_pkgname
GenericName=Wii U Emulator
Comment=$pkgdesc
Terminal=false
Categories=Game;Emulator;
Keywords=Nintendo;
MimeType=application/x-wii-u-rom;
END

  chmod -R u+rwX,go+rX,go-w "$pkgdir/"
}

_run_if_exists() {
  if declare -F "$1" > /dev/null; then
    eval "$1"
  fi
}
