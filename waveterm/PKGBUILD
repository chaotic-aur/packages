# Maintainer: zxp19821005 <zxp19821005 at 163 dot com>
# Maintainer: Edu4rdSHL <edu4rdshl@protonmail.com>
# Maintainer: Evan Simkowitz <https://simkowitz.dev/>
pkgname=waveterm
_pkgname=Wave
_appname="${_pkgname} Terminal"
pkgver=0.7.6
_electronversion=30
_nodeversion=20
pkgrel=1
pkgdesc="An open-source, cross-platform terminal for seamless workflows"
arch=('any')
url="https://www.waveterm.dev/"
_ghurl="https://github.com/wavetermdev/waveterm"
license=('Apache-2.0')
conflicts=("${pkgname}")
depends=(
  "electron${_electronversion}"
)
makedepends=(
  'gcc'
  'yarn'
  'gendesk'
  'npm'
  'go>=1.18'
  'scripthaus'
  'curl'
  'gcc'
  'zip'
  'curl'
  'nvm'
)
source=(
  "${pkgname}-${pkgver}.tar.gz::${_ghurl}/archive/refs/tags/v${pkgver}.tar.gz"
  "${pkgname}.sh"
)
sha256sums=('bb448860b365304fe8dd9156b956c65bac6b3bbfc9c7c2d0c7e058a12ad6fd29'
  '2b2e8aeed33fd71c521e49fd54fb2fa81218d16aef8bccb88d77909055ab8051')
_ensure_local_nvm() {
  export NVM_DIR="${srcdir}/.nvm"
  source /usr/share/nvm/init-nvm.sh || [[ $? != 1 ]]
  nvm install "${_nodeversion}"
  nvm use "${_nodeversion}"
}
build() {
  _ensure_local_nvm
  sed -e "s|@electronversion@|${_electronversion}|" \
    -e "s|@appname@|${pkgname}|g" \
    -e "s|@runname@|app|g" \
    -e "s|@cfgdirname@|${_pkgname}|g" \
    -e "s|@options@|env ELECTRON_OZONE_PLATFORM_HINT=auto|g" \
    -i "${srcdir}/${pkgname}.sh"
  gendesk -f -n -q --pkgname="${pkgname}" --pkgdesc="${pkgdesc}" --categories="Utility" --name="${_appname}" --exec="${pkgname} %U"
  cd "${srcdir}/${pkgname}-${pkgver}"
  export npm_config_build_from_source=true
  export ELECTRON_SKIP_BINARY_DOWNLOAD=1
  #export SYSTEM_ELECTRON_VERSION="$(electron${_electronversion} -v | sed 's/v//g')"
  #export npm_config_target="${SYSTEM_ELECTRON_VERSION}"
  #export ELECTRONVERSION="${_electronversion}"
  export CGO_ENABLED=1
  export GO111MODULE=on
  export GOOS=linux
  export GOCACHE="${srcdir}/go-build"
  export GOMODCACHE="${srcdir}/go/pkg/mod"
  HOME="${srcdir}/.electron-gyp"
  mkdir -p "${srcdir}/.electron-gyp"
  touch "${srcdir}/.electron-gyp/.yarnrc"
  if [ $(curl -s ipinfo.io/country | grep CN | wc -l) -ge 1 ]; then
    export npm_config_registry=https://registry.npmmirror.com
    export npm_config_disturl=https://registry.npmmirror.com/-/binary/node/
    export npm_config_electron_mirror=https://registry.npmmirror.com/-/binary/electron/
    export npm_config_electron_builder_binaries_mirror=https://registry.npmmirror.com/-/binary/electron-builder-binaries/
    export GOPROXY=https://goproxy.cn
  else
    echo "Your network is OK."
  fi
  sed "s|-l -p never|-l --dir|g" -i scripthaus.md
  yarn install --cache-folder "${srcdir}/.yarn_cache"
  scripthaus run electron-rebuild
  scripthaus run build-backend
  scripthaus run build-package-linux
}
package() {
  install -Dm755 "${srcdir}/${pkgname}.sh" "${pkgdir}/usr/bin/${pkgname}"
  install -Dm644 "${srcdir}/${pkgname}-${pkgver}/make/linux-"*/resources/app.asar -t "${pkgdir}/usr/lib/${pkgname}"
  cp -r "${srcdir}/${pkgname}-${pkgver}/make/linux-"*/resources/app.asar.unpacked "${pkgdir}/usr/lib/${pkgname}"
  install -Dm644 "${srcdir}/${pkgname}.desktop" -t "${pkgdir}/usr/share/applications"
  install -Dm644 "${srcdir}/${pkgname}-${pkgver}/src/app/assets/${pkgname}-logo.png" "${pkgdir}/usr/share/pixmaps/${pkgname}.png"
}
