# Maintainer: zxp19821005 <zxp19821005 at 163 dot com>
# Maintainer: Edu4rdSHL <edu4rdshl@protonmail.com>
# Maintainer: Evan Simkowitz <https://simkowitz.dev/>
pkgname=waveterm
_pkgname=Wave
_appname="${_pkgname} Terminal"
pkgver=0.8.9
_electronversion=32
_nodeversion=22
pkgrel=1
pkgdesc="An open-source, cross-platform terminal for seamless workflows"
arch=(
  'aarch64'
  'x86_64'
)
url="https://www.waveterm.dev/"
_ghurl="https://github.com/wavetermdev/waveterm"
license=('Apache-2.0')
conflicts=("${pkgname}")
depends=(
  "electron${_electronversion}"
  'libvips'
)
makedepends=(
  'gcc'
  'gendesk'
  'npm'
  'go>=1.18'
  'curl'
  'gcc'
  'zip'
  'curl'
  'nvm'
  'ruby'
  'go-task'
  'zig'
)
source=(
  "${pkgname}-${pkgver}.tar.gz::${_ghurl}/archive/refs/tags/v${pkgver}.tar.gz"
  "${pkgname}.sh"
)
sha256sums=('1392e7c83aa7ab106347abeab1929e3488c6a6f0e15307250c9bf110bc414d25'
  '291f50480f5a61bc9c68db7d44cd0412071128706baa868a9cb854f8779a1980')
_ensure_local_nvm() {
  local NVM_DIR="${srcdir}/.nvm"
  source /usr/share/nvm/init-nvm.sh || [[ $? != 1 ]]
  nvm install "${_nodeversion}"
  nvm use "${_nodeversion}"
}
build() {
  sed -e "
        s/@electronversion@/${_electronversion}/g
        s/@appname@/${pkgname}/g
        s/@runname@/app.asar/g
        s/@cfgdirname@/${_pkgname}/g
        s/@options@/env ELECTRON_OZONE_PLATFORM_HINT=auto/g
    " -i "${srcdir}/${pkgname}.sh"
  _ensure_local_nvm
  gendesk -f -n -q --pkgname="${pkgname}" --pkgdesc="${pkgdesc}" --categories="Utility" --name="${_appname}" --exec="${pkgname} %U"
  cd "${srcdir}/${pkgname}-${pkgver}"
  export ELECTRON_SKIP_BINARY_DOWNLOAD=1
  export SYSTEM_ELECTRON_VERSION="$(electron${_electronversion} -v | sed 's/v//g')"
  export CGO_ENABLED=1
  export GO111MODULE=on
  export GOOS=linux
  export GOCACHE="${srcdir}/go-build"
  export GOMODCACHE="${srcdir}/go/pkg/mod"
  HOME="${srcdir}/.electron-gyp"
  mkdir -p "${srcdir}/.electron-gyp"
  touch "${srcdir}/.electron-gyp/.yarnrc.yml"
  if [[ "$(curl -s ipinfo.io/country)" == *"CN"* ]]; then
    export npm_config_disturl=https://registry.npmmirror.com/-/binary/node/
    export npm_config_electron_mirror=https://registry.npmmirror.com/-/binary/electron/
    export npm_config_electron_builder_binaries_mirror=https://registry.npmmirror.com/-/binary/electron-builder-binaries/
    echo 'npmRegistryServer: "https://registry.npmmirror.com"' >> "${srcdir}/.electron-gyp/.yarnrc.yml"
    go env -w GOPROXY=https://goproxy.cn,direct
    gem sources --add https://mirrors.aliyun.com/rubygems/ --remove https://rubygems.org/
    bundle config mirror.https://rubygems.org https://mirrors.aliyun.com/rubygems
  else
    echo "Your network is OK."
  fi
  sed -i "s/\"electron\": \"[^\"]*\"/\"electron\": \"${SYSTEM_ELECTRON_VERSION}\"/g" package.json
  sed -i "s/build\/icons.icns/build\/appicon.png/g;s/\"zip\", \"deb\", \"rpm\", \"AppImage\", \"pacman\"/\"dir\"/g" electron-builder.config.cjs
  sed -i "/- build:server:macos/d;/- build:server:windows/d" Taskfile.yml
  sed -i "138,145d" Taskfile.yml
  sed -i "122,129d" Taskfile.yml
  gem install fpm
  _yarnver=$(grep "yarn@" package.json | awk '{print $2}' | sed "s/\"//g;s/yarn@//g;s/,//g")
  corepack enable yarn
  echo y | yarn version "${_yarnver}"
  NODE_ENV=development yarn install
  NODE_ENV=production go-task package
}
package() {
  install -Dm755 "${srcdir}/${pkgname}.sh" "${pkgdir}/usr/bin/${pkgname}"
  install -Dm644 "${srcdir}/${pkgname}-${pkgver}/make/linux-"*/resources/app.asar -t "${pkgdir}/usr/lib/${pkgname}"
  cp -r "${srcdir}/${pkgname}-${pkgver}/make/linux-"*/resources/app.asar.unpacked "${pkgdir}/usr/lib/${pkgname}"
  install -Dm644 "${srcdir}/${pkgname}.desktop" -t "${pkgdir}/usr/share/applications"
  install -Dm644 "${srcdir}/${pkgname}-${pkgver}/build/appicon.png" "${pkgdir}/usr/share/pixmaps/${pkgname}.png"
}
