#!/usr/bin/env bash
# shellcheck disable=2034

KNOWN_VARIABLE_LIST=(CI_PKGBUILD_SOURCE CI_PACKAGE_BUMP CI_ON_TRIGGER CI_MANAGE_AUR CI_REBUILD_TRIGGERS BUILDER_CACHE_SOURCES BUILDER_EXTRA_TIMEOUT BUILDER_CLASS)
KNOWN_STATE_VARIABLE_LIST=(CI_GIT_COMMIT)
declare -A KNOWN_CONFIG_LIST=([BUILD_REPO]="chaotic-aur" [GIT_AUTHOR_EMAIL]="ci@example.com" [GIT_AUTHOR_NAME]="chaotic-aur" [REDIS_SSH_HOST]="localhost" [REDIS_SSH_PORT]="22" [REDIS_SSH_USER]="redis" [REDIS_PORT]="6379" [REPO_NAME]="chaotic-aur" [CI_HUMAN_REVIEW]="false" [TEMPLATE_REPO]="https://github.com/chaotic-cx/chaotic-repository-template" [TEMPLATE_ENABLE_UPDATES]="true" [CI_MANAGE_AUR]="false" [CI_CLONE_DELAY]="0" [CI_AUR_PROXY]="" [CI_LIB_DB]="" [CI_CODE_SKIP]=123)

EXCLUDE_FILES=(.CI .git .gitignore)

# Get a list of all the packages in the repo
function UTIL_GET_PACKAGES() {
    set -euo pipefail
    local -n GET_PACKAGES_ARRAY=${1:-PACKAGES}
    mapfile -t GET_PACKAGES_ARRAY < <(find . -mindepth 1 -maxdepth 1 -type d -not -path '*/.*' -printf '%P\n')
}

# $1: File to read variables from
# $2: Output associative array
# $3: array of known variables
function UTIL_READ_KNOWN_VARIABLES_FROM_FILE() {
    set -euo pipefail
    local file=$1
    local -n READ_ASSOC_ARRAY=${2:-VARIABLES}
    if [ -v 3 ]; then
        local -n READ_KNOWN_ARRAY=${3}
    fi
    while IFS= read -r line || [ -n "$line" ]; do
        if [[ "$line" =~ ^[[:space:]]*([a-zA-Z0-9_]+)[[:space:]]*=[[:space:]]*(.*)[[:space:]]*$ ]]; then
            # Make sure the key is in the known variable list
            if [[ -v READ_KNOWN_ARRAY[@] ]] && [[ " ${READ_KNOWN_ARRAY[*]} " != *" ${BASH_REMATCH[1]} "* ]]; then
                continue
            fi
            READ_ASSOC_ARRAY["${BASH_REMATCH[1]}"]="${BASH_REMATCH[2]}"
        fi
    done <"$file"
}
function UTIL_WRITE_VARIABLES_TO_FILE() {
    set -euo pipefail
    local file=$1
    local -n WRITE_ASSOC_ARRAY=${2:-VARIABLES}

    # Clear the file before writing variables
    true >"$file"

    for key in "${!WRITE_ASSOC_ARRAY[@]}"; do
        echo "$key=${WRITE_ASSOC_ARRAY[$key]}" >>"$file"
    done
}

# The reason this function doesn't use UTIL_PRUNE_UNKNOWN_VARIABLES is because we want to
# keep the unknown variables in the array, but not write them to the file
function UTIL_WRITE_KNOWN_VARIABLES_TO_FILE() {
    set -euo pipefail
    local file=$1 first=true
    local -n WRITE_ASSOC_ARRAY=${2:-VARIABLES}
    local -n WRITE_ASSOC_ARRAY_KNOWN=${3:-KNOWN_VARIABLE_LIST}

    for key in "${!WRITE_ASSOC_ARRAY[@]}"; do
        if [[ ! " ${WRITE_ASSOC_ARRAY_KNOWN[*]} " == *" ${key} "* ]]; then
            continue
        fi
        if [ "$first" == "true" ]; then
            echo "$key=${WRITE_ASSOC_ARRAY[$key]}" >"$file"
            first=false
        else
            echo "$key=${WRITE_ASSOC_ARRAY[$key]}" >>"$file"
        fi
    done
}

function UTIL_READ_MANAGED_PACAKGE() {
    set -euo pipefail
    local target_file="./${1}/.CI/config"
    local target_state_file="./.state/${1}"
    local ret=1
    local -n READ_MANAGED_ASSOC_ARRAY=${2:-VARIABLES}
    if [ -f "$target_file" ]; then
        UTIL_READ_KNOWN_VARIABLES_FROM_FILE "$target_file" READ_MANAGED_ASSOC_ARRAY KNOWN_VARIABLE_LIST
        # Check if any variable at all was read
        if [ ${#READ_MANAGED_ASSOC_ARRAY[@]} -ne 0 ]; then
            ret=0
        else
            READ_MANAGED_ASSOC_ARRAY[CI_NO_CONFIG]=true
        fi
    else
        READ_MANAGED_ASSOC_ARRAY[CI_NO_CONFIG]=true
    fi

    # This file might or might not exist depending on the current state of the application
    if [ -f "$target_state_file" ]; then
        UTIL_READ_KNOWN_VARIABLES_FROM_FILE "$target_state_file" READ_MANAGED_ASSOC_ARRAY KNOWN_STATE_VARIABLE_LIST
    fi

    # shellcheck disable=2153
    READ_MANAGED_ASSOC_ARRAY[PKGBASE]="$1"
    return $ret
}

function UTIL_WRITE_MANAGED_PACKAGE() {
    set -euo pipefail
    local target_file="./${1}/.CI/config"
    local target_state_file="./.newstate/${1}"
    local -n WRITE_MANAGED_ASSOC_ARRAY=${2:-VARIABLES}
    if [[ ! -v WRITE_MANAGED_ASSOC_ARRAY[CI_NO_CONFIG] ]]; then
        UTIL_WRITE_KNOWN_VARIABLES_TO_FILE "$target_file" WRITE_MANAGED_ASSOC_ARRAY KNOWN_VARIABLE_LIST
    fi
    UTIL_WRITE_KNOWN_VARIABLES_TO_FILE "$target_state_file" WRITE_MANAGED_ASSOC_ARRAY KNOWN_STATE_VARIABLE_LIST
}

# Extract both the normal url and the fragment
function UTIL_GET_URI_PARTS() {
    set -euo pipefail
    local netfile=$1

    local fragment=${netfile#*#}
    if [[ "$fragment" = "$netfile" ]]; then
        fragment=""
    fi
    fragment=${fragment%\?*}

    local url="${netfile%%#*}"
    url="${url%%\?*}"

    printf "%s\n%s" "$url" "$fragment"
}

# $1: VARIABLES
function UTIL_FETCH_VCS_COMMIT() {
    set -euo pipefail
    local -n VARIABLES_FETCH_VCS_COMMIT=${1:-VARIABLES}
    local pkgbase="${VARIABLES_FETCH_VCS_COMMIT[PKGBASE]}"

    # Check if .SRCINFO exists. We can't work with a -git package without it
    if ! [ -f "$pkgbase/.SRCINFO" ]; then
        return 1
    fi

    # Parse the first source from the .SRCINFO file
    # Example output: https://github.com/LinusDierheimer/fastfetch.git#branch=dev
    local source fragment ref
    source=$(grep -m 1 -oP '\ssource\s=\s.*git\+\K.*$' "$pkgbase/.SRCINFO" || true)
    ref=HEAD

    if [ -z "$source" ]; then
        # Unable to find source in .SRCINFO
        # This does not mean that we are at fault
        # So we return 0 to indicate that we should remove the VCS indication from the package
        return 0
    fi

    declare -a results
    mapfile -t results <<<"$(UTIL_GET_URI_PARTS "$source")"
    source="${results[0]}"

    if [ -v "results[1]" ]; then
        local type fragment="${results[1]}"
        type="${fragment%%=*}"
        # This heuristic is used to check if the fragment is a branch.
        # If the fragment is not a branch, it must be a commit hash or a tag.
        # In those cases, we don't need to update VCS, because we assume
        # the package maintainer will update the PKGBUILD accordingly.
        if [ "$type" != "branch" ]; then
            return 0
        fi
        ref="${fragment##*=}"
    fi

    local _NEWEST_COMMIT
    if ! _NEWEST_COMMIT="$({ git ls-remote "$source" "$ref" 2>/dev/null || [ $? == 141 ]; } | grep -m1 -oP '\w+(?=\t\w)')"; then
        return 1
    fi
    if [ -z "$_NEWEST_COMMIT" ]; then
        return 1
    fi

    printf "%s" "$_NEWEST_COMMIT"
}

# $1: VARIABLES
# $2: new commit
function UTIL_UPDATE_VCS_COMMIT() {
    set -euo pipefail
    local -n VARIABLES_UPDATE_VCS_COMMIT=${1:-VARIABLES}
    local new_commit="$2"

    if [ -n "$new_commit" ]; then
        VARIABLES_UPDATE_VCS_COMMIT[CI_GIT_COMMIT]="$new_commit"
    fi
}

# $1: Output associative array
# $2: array of pkgbases on AUR
function UTIL_FETCH_AUR_TIMESTAMPS() {
    set -euo pipefail
    local -n OUTPUT_ASSOC_ARRAY=$1
    local pkgbases=()

    read -ra pkgbases <<<"$2"

    # Check size of array
    if [ ${#pkgbases[@]} -eq 0 ]; then
        return 0
    fi

    local API_URL="https://aur.archlinux.org/rpc/v5/info"
    local first=1

    # Loop through $2 but via index numbers. If index != 0, append &arg[]= to the URL
    for i in "${!pkgbases[@]}"; do
        if [ "$first" -eq 1 ]; then
            API_URL+="?arg[]=${pkgbases[$i]}"
            first=0
        else
            API_URL+="&arg[]=${pkgbases[$i]}"
        fi

        # Every 150 packages or at the end of the array, fetch the timestamps
        if [ $((i % 150)) -eq 149 ] || [ "$i" -eq "$((${#pkgbases[@]} - 1))" ]; then
            local response

            # Ensure also packages containing "+" can be fetched, since this is a special character in URLs
            API_URL=${API_URL//+/%2B}

            UTIL_PRINT_INFO "Fetching AUR timestamps for $((i + 1))/${#pkgbases[@]} packages..."
            if response="$(curl -s "$API_URL")"; then
                local -a res_timestamps
                mapfile -t res_timestamps <<<"$(jq -r '.results[].LastModified' <<<"$response")"
                local -a res_pkgbases
                mapfile -t res_pkgbases <<<"$(jq -r '.results[].PackageBase' <<<"$response")"

                # Loop through timestamps and pkgbases and add them to the associative array
                for j in "${!res_timestamps[@]}"; do
                    OUTPUT_ASSOC_ARRAY["${res_pkgbases[$j]}"]="${res_timestamps[$j]}"
                done
            fi
            API_URL="https://aur.archlinux.org/rpc/v5/info"
            first=1
        fi
    done
}

# Generate exclude list for rsync, diff, etc.
# $1: prefix
# $2: Extra ignores
function UTIL_GET_EXCLUDE_LIST() {
    set -euo pipefail
    local prefix="$1"
    local -a extra_ignores=()
    read -ra extra_ignores <<<"${2:-}"

    local -a exclude_list=("${EXCLUDE_FILES[@]}" "${extra_ignores[@]}")

    local -a exclude_output=()
    for i in "${exclude_list[@]}"; do
        exclude_output+=("${prefix}")
        exclude_output+=("${i}")
    done

    printf "%s" "${exclude_output[*]}"
}

function UTIL_READ_CONFIG_FILE() {
    set -euo pipefail
    local -a UTIL_READ_CONFIG_FILE_KNOWN_VARIABLES=("${!KNOWN_CONFIG_LIST[@]}")
    declare -A UTIL_READ_CONFIG_FILE_ARRAY
    UTIL_READ_KNOWN_VARIABLES_FROM_FILE ".ci/config" UTIL_READ_CONFIG_FILE_ARRAY UTIL_READ_CONFIG_FILE_KNOWN_VARIABLES

    # Set all variables as global variables
    for key in "${!UTIL_READ_CONFIG_FILE_ARRAY[@]}"; do
        declare -g "$key=${UTIL_READ_CONFIG_FILE_ARRAY[$key]}"
        export "${key?}"
    done

    # Set any missing variables to their default values
    for key in "${!KNOWN_CONFIG_LIST[@]}"; do
        if ! [ -v "$key" ]; then
            declare -g "$key=${KNOWN_CONFIG_LIST[$key]}"
            export "${key?}"
        fi
    done
}

# $1: Run directory
# $2: Custom hook executable path
function UTIL_LOAD_CUSTOM_HOOK() {
    set -euo pipefail
    if [[ -f "$2" && -x "$2" ]] && [ -d "$1" ]; then
        pushd "$1" >/dev/null || return 1
        "$2" || {
            UTIL_PRINT_ERROR "Custom hook failed: $2"
            popd >/dev/null || return 1
            return
        }
        popd >/dev/null || return 1
    fi
}

# $1: The database URL
# $2: The temporary directory
function UTIL_PARSE_DATABASE() {
    set -euo pipefail
    local db_url="$1"
    local tmp_dir="$2"
    declare -A already_parsed=() # Prevent processing one pkgbase more than once

    # Extract db name from URL
    repo=$(echo "$db_url" | grep -oP '.*\/\K[^\/]*(?=.db)')

    UTIL_PRINT_INFO "Retrieving new package versions from database $repo..."

    mkdir -p "${tmp_dir}/${repo}"
    wget -P "${tmp_dir}/${repo}" "${db_url}" &>/dev/null
    tar -xf "${tmp_dir}/${repo}/${repo}.db" -C "${tmp_dir}/${repo}"

    while read -r pkgbase version; do
        # Escape any dots in the package name since that breaks the code
        # because of an invalid arithmetic statement
        normalized_pkgbase=${pkgbase//./}
        if [[ -v already_parsed["${normalized_pkgbase}"] ]]; then
            continue
        else
            echo "$pkgbase:$version" >>"${tmp_dir}/version-state"
            already_parsed["$normalized_pkgbase"]="true"
        fi
    done < <(find "${tmp_dir}/${repo}" -maxdepth 2 -name 'desc' -exec awk -f .ci/awk/parse-database.awk {} +)
}

# $1: Message
function UTIL_PRINT_WARNING() {
    set -euo pipefail
    printf '\e[1;33mWarning:\e[0m %s\n' "$1" >&2
}

# $1: Message
function UTIL_PRINT_ERROR() {
    set -euo pipefail
    printf '\e[1;31mError:\e[0m %s\n' "$1" >&2
}

# $1: Message
function UTIL_PRINT_INFO() {
    set -euo pipefail
    printf '\e[1;34mInfo:\e[0m %s\n' "$1"
}

# $1: pkgbase
function UTIL_CHECK_STATE_DIFF() {
    set -euo pipefail
    if test -f "./.state/${1}" && test -f "./.newstate/${1}"; then
        if diff -q "./.state/${1}" "./.newstate/${1}" >/dev/null; then
            return 0
        else
            return 1
        fi
    else
        return 0
    fi
}