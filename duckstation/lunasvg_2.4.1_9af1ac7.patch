From 9af1ac7b90658a279b372add52d6f77a4ebb482c Mon Sep 17 00:00:00 2001
From: Stenzek <stenzek@gmail.com>
Date: Sun, 25 Aug 2024 14:21:27 +1000
Subject: [PATCH] Local changes

 - CMake package.
 - Fix Windows DLL.
 - C interface, since new/delete is unsafe across DLL boundary.
---
 .github/FUNDING.yml      |   3 -
 .github/workflows/ci.yml |  31 ----
 CMakeLists.txt           |  55 +++++-
 include/CMakeLists.txt   |   2 +-
 include/lunasvg.h        |  27 +--
 include/lunasvg_c.h      | 142 ++++++++++++++++
 lunasvgConfig.cmake.in   |   9 +
 source/CMakeLists.txt    |   1 +
 source/lunasvg_c.cpp     | 352 +++++++++++++++++++++++++++++++++++++++
 9 files changed, 557 insertions(+), 65 deletions(-)
 delete mode 100644 .github/FUNDING.yml
 delete mode 100644 .github/workflows/ci.yml
 create mode 100644 include/lunasvg_c.h
 create mode 100644 lunasvgConfig.cmake.in
 create mode 100644 source/lunasvg_c.cpp

diff --git a/.github/FUNDING.yml b/.github/FUNDING.yml
deleted file mode 100644
index 016b945..0000000
--- a/.github/FUNDING.yml
+++ /dev/null
@@ -1,3 +0,0 @@
-# These are supported funding model platforms
-
-custom: ['https://www.paypal.me/sammycage']
diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
deleted file mode 100644
index f91644d..0000000
--- a/.github/workflows/ci.yml
+++ /dev/null
@@ -1,31 +0,0 @@
-name: Build
-on: [push, pull_request]
-
-jobs:
-  linux:
-    runs-on: ubuntu-latest
-    env:
-      CC: gcc-10
-      CXX: g++-10
-    steps:
-      - uses: actions/checkout@v2
-      - run: cmake . -DLUNASVG_BUILD_EXAMPLES=ON
-      - run: make -j 2
-
-  macos:
-    runs-on: macos-latest
-    steps:
-      - uses: actions/checkout@v2
-      - run: cmake . -DLUNASVG_BUILD_EXAMPLES=ON
-      - run: cmake --build .
-
-  windows:
-    runs-on: windows-latest
-    steps:
-      - uses: actions/checkout@v2
-      - run: cmake . -DLUNASVG_BUILD_EXAMPLES=ON
-      - run: cmake --build .
-      - uses: actions/upload-artifact@v2
-        with:
-          name: svg2png-windows
-          path: example\*\svg2png.exe
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3565911..2ab7582 100755
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -5,10 +5,18 @@ project(lunasvg VERSION 2.4.1 LANGUAGES CXX C)
 set(CMAKE_CXX_STANDARD 11)
 set(CMAKE_C_STANDARD 11)
 
+set(CMAKE_C_VISIBILITY_PRESET hidden)
+set(CMAKE_CXX_VISIBILITY_PRESET hidden)
+set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)
+
 option(BUILD_SHARED_LIBS "Build as a shared library" ON)
 option(LUNASVG_BUILD_EXAMPLES "Build example(s)" OFF)
 
-add_library(lunasvg)
+if(BUILD_SHARED_LIBS)
+  add_library(lunasvg SHARED)
+else()
+  add_library(lunasvg STATIC)
+endif()
 
 add_subdirectory(include)
 add_subdirectory(source)
@@ -25,16 +33,47 @@ if(LUNASVG_BUILD_EXAMPLES)
     target_include_directories(svg2png PRIVATE 3rdparty/stb)
 endif()
 
-set(LUNASVG_LIBDIR ${CMAKE_INSTALL_PREFIX}/lib)
-set(LUNASVG_INCDIR ${CMAKE_INSTALL_PREFIX}/include)
+include(GNUInstallDirs)
 
+if(NOT BUILD_SHARED_LIBS)
+  install(FILES
+      include/lunasvg.h
+      DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+  )
+endif()
 install(FILES
-    include/lunasvg.h
-    DESTINATION ${LUNASVG_INCDIR}
+    include/lunasvg_c.h
+    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
 )
 
 install(TARGETS lunasvg
-    LIBRARY     DESTINATION    ${LUNASVG_LIBDIR}
-    ARCHIVE     DESTINATION    ${LUNASVG_LIBDIR}
-    INCLUDES    DESTINATION    ${LUNASVG_INCDIR}
+    EXPORT      lunasvgTargets
+    RUNTIME     DESTINATION    ${CMAKE_INSTALL_BINDIR}
+    LIBRARY     DESTINATION    ${CMAKE_INSTALL_LIBDIR}
+    ARCHIVE     DESTINATION    ${CMAKE_INSTALL_LIBDIR}
+    INCLUDES    DESTINATION    ${CMAKE_INSTALL_INCLUDEDIR}
+)
+
+include(CMakePackageConfigHelpers)
+set(LUNASVG_INSTALL_CMAKEDIR "${CMAKE_INSTALL_LIBDIR}/cmake/lunasvg")
+install(
+  EXPORT lunasvgTargets
+  FILE lunasvgTargets.cmake
+  NAMESPACE lunasvg::
+  DESTINATION "${LUNASVG_INSTALL_CMAKEDIR}"
+)
+configure_package_config_file(lunasvgConfig.cmake.in
+  "${CMAKE_CURRENT_BINARY_DIR}/lunasvgConfig.cmake"
+  INSTALL_DESTINATION "${LUNASVG_INSTALL_CMAKEDIR}"
+)
+write_basic_package_version_file(
+  "${CMAKE_CURRENT_BINARY_DIR}/lunasvgConfigVersion.cmake"
+  VERSION "${CMAKE_PROJECT_VERSION}"
+  COMPATIBILITY SameMajorVersion
+)
+install(
+  FILES
+    "${CMAKE_CURRENT_BINARY_DIR}/lunasvgConfig.cmake"
+    "${CMAKE_CURRENT_BINARY_DIR}/lunasvgConfigVersion.cmake"
+    DESTINATION "${LUNASVG_INSTALL_CMAKEDIR}"
 )
diff --git a/include/CMakeLists.txt b/include/CMakeLists.txt
index de58954..00a974f 100755
--- a/include/CMakeLists.txt
+++ b/include/CMakeLists.txt
@@ -1,4 +1,4 @@
 target_include_directories(lunasvg
-PUBLIC
+PRIVATE
     "${CMAKE_CURRENT_LIST_DIR}"
 )
diff --git a/include/lunasvg.h b/include/lunasvg.h
index 728030a..1e63f29 100644
--- a/include/lunasvg.h
+++ b/include/lunasvg.h
@@ -28,23 +28,6 @@
 #include <string>
 #include <map>
 
-#if !defined(LUNASVG_BUILD_STATIC) && (defined(_WIN32) || defined(__CYGWIN__))
-#define LUNASVG_EXPORT __declspec(dllexport)
-#define LUNASVG_IMPORT __declspec(dllimport)
-#elif defined(__GNUC__) && (__GNUC__ >= 4)
-#define LUNASVG_EXPORT __attribute__((__visibility__("default")))
-#define LUNASVG_IMPORT
-#else
-#define LUNASVG_EXPORT
-#define LUNASVG_IMPORT
-#endif
-
-#ifdef LUNASVG_BUILD
-#define LUNASVG_API LUNASVG_EXPORT
-#else
-#define LUNASVG_API LUNASVG_IMPORT
-#endif
-
 #define LUNASVG_VERSION_MAJOR 2
 #define LUNASVG_VERSION_MINOR 4
 #define LUNASVG_VERSION_MICRO 1
@@ -61,7 +44,7 @@ namespace lunasvg {
 class Rect;
 class Matrix;
 
-class LUNASVG_API Box {
+class Box {
 public:
     Box() = default;
     Box(double x, double y, double w, double h);
@@ -79,7 +62,7 @@ class LUNASVG_API Box {
 
 class Transform;
 
-class LUNASVG_API Matrix {
+class Matrix {
 public:
     Matrix() = default;
     Matrix(double a, double b, double c, double d, double e, double f);
@@ -116,7 +99,7 @@ class LUNASVG_API Matrix {
     double f{0};
 };
 
-class LUNASVG_API Bitmap {
+class Bitmap {
 public:
     /**
      * @note Bitmap format is ARGB32 Premultiplied.
@@ -146,7 +129,7 @@ class LUNASVG_API Bitmap {
 
 class Element;
 
-class LUNASVG_API DomElement {
+class DomElement {
 public:
     /**
      * @brief DomElement
@@ -239,7 +222,7 @@ class LUNASVG_API DomElement {
 class LayoutSymbol;
 class SVGElement;
 
-class LUNASVG_API Document {
+class Document {
 public:
     /**
      * @brief Creates a document from a file
diff --git a/include/lunasvg_c.h b/include/lunasvg_c.h
new file mode 100644
index 0000000..515537c
--- /dev/null
+++ b/include/lunasvg_c.h
@@ -0,0 +1,142 @@
+/*
+ * Copyright (c) 2020 Nwutobo Samuel Ugochukwu <sammycageagle@gmail.com>
+ * Copyright (c) 2024 Connor McLaughlin <stenzek@gmail.com>
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#ifndef LUNASVG_C_H
+#define LUNASVG_C_H
+
+#include <stdbool.h>
+#include <stdint.h>
+
+#if !defined(LUNASVG_BUILD_STATIC) && (defined(_WIN32) || defined(__CYGWIN__))
+#define LUNASVG_EXPORT __declspec(dllexport)
+#define LUNASVG_IMPORT __declspec(dllimport)
+#elif defined(__GNUC__) && (__GNUC__ >= 4)
+#define LUNASVG_EXPORT __attribute__((__visibility__("default")))
+#define LUNASVG_IMPORT
+#else
+#define LUNASVG_EXPORT
+#define LUNASVG_IMPORT
+#endif
+
+#ifdef LUNASVG_BUILD
+#include "lunasvg.h"
+#endif
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#ifdef LUNASVG_BUILD
+typedef lunasvg::Box lunasvg_box;
+typedef lunasvg::Matrix lunasvg_matrix;
+typedef lunasvg::Bitmap lunasvg_bitmap;
+typedef lunasvg::Document lunasvg_document;
+
+#define LUNASVG_API LUNASVG_EXPORT
+#else
+typedef void* lunasvg_box;
+typedef void* lunasvg_matrix;
+typedef void* lunasvg_bitmap;
+typedef void* lunasvg_document;
+#define LUNASVG_API LUNASVG_IMPORT
+#endif
+
+LUNASVG_API lunasvg_box* lunasvg_box_create();
+LUNASVG_API lunasvg_box* lunasvg_box_create_with_values(double x, double y, double w, double h);
+LUNASVG_API lunasvg_box* lunasvg_box_create_from_rect(const lunasvg_box* rect);
+LUNASVG_API void lunasvg_box_destroy(lunasvg_box* box);
+LUNASVG_API void lunasvg_box_transform(lunasvg_box* box, const lunasvg_matrix* matrix);
+LUNASVG_API lunasvg_box* lunasvg_box_transformed(const lunasvg_box* box, const lunasvg_matrix* matrix);
+LUNASVG_API void lunasvg_box_get_values(const lunasvg_box* box, double* x, double* y, double* w, double* h);
+LUNASVG_API double lunasvg_box_get_x(const lunasvg_box* box);
+LUNASVG_API double lunasvg_box_get_y(const lunasvg_box* box);
+LUNASVG_API double lunasvg_box_get_width(const lunasvg_box* box);
+LUNASVG_API double lunasvg_box_get_height(const lunasvg_box* box);
+LUNASVG_API void lunasvg_box_set_x(lunasvg_box* box, double x);
+LUNASVG_API void lunasvg_box_set_y(lunasvg_box* box, double y);
+LUNASVG_API void lunasvg_box_set_width(lunasvg_box* box, double width);
+LUNASVG_API void lunasvg_box_set_height(lunasvg_box* box, double height);
+
+LUNASVG_API lunasvg_matrix* lunasvg_matrix_create();
+LUNASVG_API lunasvg_matrix* lunasvg_matrix_create_with_values(double a, double b, double c, double d, double e,
+                                                              double f);
+LUNASVG_API void lunasvg_matrix_destroy(lunasvg_matrix* matrix);
+LUNASVG_API void lunasvg_matrix_rotate(lunasvg_matrix* matrix, double angle);
+LUNASVG_API void lunasvg_matrix_rotate_around_point(lunasvg_matrix* matrix, double angle, double cx, double cy);
+LUNASVG_API void lunasvg_matrix_scale(lunasvg_matrix* matrix, double sx, double sy);
+LUNASVG_API void lunasvg_matrix_shear(lunasvg_matrix* matrix, double shx, double shy);
+LUNASVG_API void lunasvg_matrix_translate(lunasvg_matrix* matrix, double tx, double ty);
+LUNASVG_API void lunasvg_matrix_transform(lunasvg_matrix* matrix, double a, double b, double c, double d, double e,
+                                          double f);
+LUNASVG_API void lunasvg_matrix_identity(lunasvg_matrix* matrix);
+LUNASVG_API void lunasvg_matrix_invert(lunasvg_matrix* matrix);
+LUNASVG_API void lunasvg_matrix_multiply(lunasvg_matrix* matrix, const lunasvg_matrix* rhs);
+LUNASVG_API void lunasvg_matrix_premultiply(lunasvg_matrix* matrix, const lunasvg_matrix* rhs);
+LUNASVG_API void lunasvg_matrix_postmultiply(lunasvg_matrix* matrix, const lunasvg_matrix* rhs);
+LUNASVG_API lunasvg_matrix* lunasvg_matrix_inverted(const lunasvg_matrix* matrix);
+LUNASVG_API lunasvg_matrix* lunasvg_matrix_rotated(double angle);
+LUNASVG_API lunasvg_matrix* lunasvg_matrix_rotated_around_point(double angle, double cx, double cy);
+LUNASVG_API lunasvg_matrix* lunasvg_matrix_scaled(double sx, double sy);
+LUNASVG_API lunasvg_matrix* lunasvg_matrix_sheared(double shx, double shy);
+LUNASVG_API lunasvg_matrix* lunasvg_matrix_translated(double tx, double ty);
+LUNASVG_API void lunasvg_matrix_get_values(const lunasvg_matrix* matrix, double* a, double* b, double* c, double* d,
+                                           double* e, double* f);
+
+LUNASVG_API lunasvg_bitmap* lunasvg_bitmap_create();
+LUNASVG_API lunasvg_bitmap* lunasvg_bitmap_create_with_data(uint8_t* data, uint32_t width, uint32_t height,
+                                                            uint32_t stride);
+LUNASVG_API lunasvg_bitmap* lunasvg_bitmap_create_with_size(uint32_t width, uint32_t height);
+LUNASVG_API void lunasvg_bitmap_destroy(lunasvg_bitmap* bitmap);
+LUNASVG_API void lunasvg_bitmap_reset_with_data(lunasvg_bitmap* bitmap, uint8_t* data, uint32_t width, uint32_t height,
+                                                uint32_t stride);
+LUNASVG_API void lunasvg_bitmap_reset_with_size(lunasvg_bitmap* bitmap, uint32_t width, uint32_t height);
+LUNASVG_API uint8_t* lunasvg_bitmap_data(const lunasvg_bitmap* bitmap);
+LUNASVG_API uint32_t lunasvg_bitmap_width(const lunasvg_bitmap* bitmap);
+LUNASVG_API uint32_t lunasvg_bitmap_height(const lunasvg_bitmap* bitmap);
+LUNASVG_API uint32_t lunasvg_bitmap_stride(const lunasvg_bitmap* bitmap);
+LUNASVG_API void lunasvg_bitmap_clear(lunasvg_bitmap* bitmap, uint32_t color);
+LUNASVG_API void lunasvg_bitmap_convert(lunasvg_bitmap* bitmap, int ri, int gi, int bi, int ai, int unpremultiply);
+LUNASVG_API void lunasvg_bitmap_convert_to_rgba(lunasvg_bitmap* bitmap);
+LUNASVG_API bool lunasvg_bitmap_valid(const lunasvg_bitmap* bitmap);
+
+LUNASVG_API lunasvg_document* lunasvg_document_load_from_file(const char* filename);
+LUNASVG_API lunasvg_document* lunasvg_document_load_from_data(const void* data, size_t size);
+LUNASVG_API lunasvg_document* lunasvg_document_load_from_string(const char* data);
+LUNASVG_API void lunasvg_document_destroy(lunasvg_document* document);
+LUNASVG_API void lunasvg_document_set_matrix(lunasvg_document* document, const lunasvg_matrix* matrix);
+LUNASVG_API void lunasvg_document_set_identity_matrix(lunasvg_document* document);
+LUNASVG_API void lunasvg_document_get_matrix(const lunasvg_document* document, lunasvg_matrix* matrix);
+LUNASVG_API void lunasvg_document_get_box(const lunasvg_document* document, lunasvg_box* box);
+LUNASVG_API double lunasvg_document_get_width(const lunasvg_document* document);
+LUNASVG_API double lunasvg_document_get_height(const lunasvg_document* document);
+LUNASVG_API void lunasvg_document_render(const lunasvg_document* document, lunasvg_bitmap* bitmap,
+                                         const lunasvg_matrix* matrix);
+LUNASVG_API lunasvg_bitmap* lunasvg_document_render_to_bitmap(const lunasvg_document* document, uint32_t width,
+                                                              uint32_t height, uint32_t background_color);
+LUNASVG_API void lunasvg_document_update_layout(lunasvg_document* document);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif // LUNASVG_H
diff --git a/lunasvgConfig.cmake.in b/lunasvgConfig.cmake.in
new file mode 100644
index 0000000..7f207a0
--- /dev/null
+++ b/lunasvgConfig.cmake.in
@@ -0,0 +1,9 @@
+@PACKAGE_INIT@
+
+include("${CMAKE_CURRENT_LIST_DIR}/lunasvgTargets.cmake")
+
+check_required_components(lunasvg)
+
+get_target_property(TEMP_LUNASVG_LOCATION lunasvg::lunasvg LOCATION)
+message(STATUS "Found lunasvg: ${TEMP_LUNASVG_LOCATION}")
+unset(TEMP_LUNASVG_LOCATION)
diff --git a/source/CMakeLists.txt b/source/CMakeLists.txt
index 1866748..538ba38 100755
--- a/source/CMakeLists.txt
+++ b/source/CMakeLists.txt
@@ -1,6 +1,7 @@
 target_sources(lunasvg 
 PRIVATE
     "${CMAKE_CURRENT_LIST_DIR}/lunasvg.cpp"
+    "${CMAKE_CURRENT_LIST_DIR}/lunasvg_c.cpp"
     "${CMAKE_CURRENT_LIST_DIR}/element.cpp"
     "${CMAKE_CURRENT_LIST_DIR}/property.cpp"
     "${CMAKE_CURRENT_LIST_DIR}/parser.cpp"
diff --git a/source/lunasvg_c.cpp b/source/lunasvg_c.cpp
new file mode 100644
index 0000000..8c95b27
--- /dev/null
+++ b/source/lunasvg_c.cpp
@@ -0,0 +1,352 @@
+/*
+ * Copyright (c) 2020 Nwutobo Samuel Ugochukwu <sammycageagle@gmail.com>
+ * Copyright (c) 2024 Connor McLaughlin <stenzek@gmail.com>
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#include "lunasvg_c.h"
+
+using namespace lunasvg;
+
+lunasvg_box* lunasvg_box_create()
+{
+  return new Box();
+}
+
+lunasvg_box* lunasvg_box_create_with_values(double x, double y, double w, double h)
+{
+  return new Box(x, y, w, h);
+}
+
+lunasvg_box* lunasvg_box_create_from_rect(const lunasvg_box* rect)
+{
+  return new Box(*rect);
+}
+
+void lunasvg_box_destroy(lunasvg_box* box)
+{
+  delete box;
+}
+
+void lunasvg_box_transform(lunasvg_box* box, const lunasvg_matrix* matrix)
+{
+  box->transform(*matrix);
+}
+
+lunasvg_box* lunasvg_box_transformed(const lunasvg_box* box, const lunasvg_matrix* matrix)
+{
+  return new Box(box->transformed(*matrix));
+}
+
+void lunasvg_box_get_values(const lunasvg_box* box, double* x, double* y, double* w, double* h)
+{
+  *x = box->x;
+  *y = box->y;
+  *w = box->w;
+  *h = box->h;
+}
+
+double lunasvg_box_get_x(const lunasvg_box* box)
+{
+  return box->x;
+}
+
+double lunasvg_box_get_y(const lunasvg_box* box)
+{
+  return box->y;
+}
+
+double lunasvg_box_get_width(const lunasvg_box* box)
+{
+  return box->w;
+}
+
+double lunasvg_box_get_height(const lunasvg_box* box)
+{
+  return box->h;
+}
+
+void lunasvg_box_set_x(lunasvg_box* box, double x)
+{
+  box->x = x;
+}
+
+void lunasvg_box_set_y(lunasvg_box* box, double y)
+{
+  box->y = y;
+}
+
+void lunasvg_box_set_width(lunasvg_box* box, double width)
+{
+  box->w = width;
+}
+
+void lunasvg_box_set_height(lunasvg_box* box, double height)
+{
+  box->h = height;
+}
+
+lunasvg_matrix* lunasvg_matrix_create()
+{
+  return new Matrix();
+}
+
+lunasvg_matrix* lunasvg_matrix_create_with_values(double a, double b, double c, double d, double e, double f)
+{
+  return new Matrix(a, b, c, d, e, f);
+}
+
+void lunasvg_matrix_destroy(lunasvg_matrix* matrix)
+{
+  delete matrix;
+}
+
+void lunasvg_matrix_rotate(lunasvg_matrix* matrix, double angle)
+{
+  matrix->rotate(angle);
+}
+
+void lunasvg_matrix_rotate_around_point(lunasvg_matrix* matrix, double angle, double cx, double cy)
+{
+  matrix->rotate(angle, cx, cy);
+}
+
+void lunasvg_matrix_scale(lunasvg_matrix* matrix, double sx, double sy)
+{
+  matrix->scale(sx, sy);
+}
+
+void lunasvg_matrix_shear(lunasvg_matrix* matrix, double shx, double shy)
+{
+  matrix->shear(shx, shy);
+}
+
+void lunasvg_matrix_translate(lunasvg_matrix* matrix, double tx, double ty)
+{
+  matrix->translate(tx, ty);
+}
+
+void lunasvg_matrix_transform(lunasvg_matrix* matrix, double a, double b, double c, double d, double e, double f)
+{
+  matrix->transform(a, b, c, d, e, f);
+}
+
+void lunasvg_matrix_identity(lunasvg_matrix* matrix)
+{
+  matrix->identity();
+}
+
+void lunasvg_matrix_invert(lunasvg_matrix* matrix)
+{
+  matrix->invert();
+}
+
+void lunasvg_matrix_multiply(lunasvg_matrix* matrix, const lunasvg_matrix* rhs)
+{
+  *matrix *= *rhs;
+}
+
+void lunasvg_matrix_premultiply(lunasvg_matrix* matrix, const lunasvg_matrix* rhs)
+{
+  matrix->premultiply(*rhs);
+}
+
+void lunasvg_matrix_postmultiply(lunasvg_matrix* matrix, const lunasvg_matrix* rhs)
+{
+  matrix->postmultiply(*rhs);
+}
+
+lunasvg_matrix* lunasvg_matrix_inverted(const lunasvg_matrix* matrix)
+{
+  return new Matrix(matrix->inverted());
+}
+
+lunasvg_matrix* lunasvg_matrix_rotated(double angle)
+{
+  return new Matrix(Matrix::rotated(angle));
+}
+
+lunasvg_matrix* lunasvg_matrix_rotated_around_point(double angle, double cx, double cy)
+{
+  return new Matrix(Matrix::rotated(angle, cx, cy));
+}
+
+lunasvg_matrix* lunasvg_matrix_scaled(double sx, double sy)
+{
+  return new Matrix(Matrix::scaled(sx, sy));
+}
+
+lunasvg_matrix* lunasvg_matrix_sheared(double shx, double shy)
+{
+  return new Matrix(Matrix::sheared(shx, shy));
+}
+
+lunasvg_matrix* lunasvg_matrix_translated(double tx, double ty)
+{
+  return new Matrix(Matrix::translated(tx, ty));
+}
+
+void lunasvg_matrix_get_values(const lunasvg_matrix* matrix, double* a, double* b, double* c, double* d, double* e,
+                               double* f)
+{
+  *a = matrix->a;
+  *b = matrix->b;
+  *c = matrix->c;
+  *d = matrix->d;
+  *e = matrix->e;
+  *f = matrix->f;
+}
+
+lunasvg_bitmap* lunasvg_bitmap_create()
+{
+  return new Bitmap();
+}
+
+lunasvg_bitmap* lunasvg_bitmap_create_with_data(uint8_t* data, uint32_t width, uint32_t height, uint32_t stride)
+{
+  return new Bitmap(data, width, height, stride);
+}
+
+lunasvg_bitmap* lunasvg_bitmap_create_with_size(uint32_t width, uint32_t height)
+{
+  return new Bitmap(width, height);
+}
+
+void lunasvg_bitmap_destroy(lunasvg_bitmap* bitmap)
+{
+  delete bitmap;
+}
+
+void lunasvg_bitmap_reset_with_data(lunasvg_bitmap* bitmap, uint8_t* data, uint32_t width, uint32_t height,
+                                    uint32_t stride)
+{
+  bitmap->reset(data, width, height, stride);
+}
+
+void lunasvg_bitmap_reset_with_size(lunasvg_bitmap* bitmap, uint32_t width, uint32_t height)
+{
+  bitmap->reset(width, height);
+}
+
+uint8_t* lunasvg_bitmap_data(const lunasvg_bitmap* bitmap)
+{
+  return bitmap->data();
+}
+
+uint32_t lunasvg_bitmap_width(const lunasvg_bitmap* bitmap)
+{
+  return bitmap->width();
+}
+
+uint32_t lunasvg_bitmap_height(const lunasvg_bitmap* bitmap)
+{
+  return bitmap->height();
+}
+
+uint32_t lunasvg_bitmap_stride(const lunasvg_bitmap* bitmap)
+{
+  return bitmap->stride();
+}
+
+void lunasvg_bitmap_clear(lunasvg_bitmap* bitmap, uint32_t color)
+{
+  bitmap->clear(color);
+}
+
+void lunasvg_bitmap_convert(lunasvg_bitmap* bitmap, int ri, int gi, int bi, int ai, int unpremultiply)
+{
+  bitmap->convert(ri, gi, bi, ai, unpremultiply);
+}
+
+void lunasvg_bitmap_convert_to_rgba(lunasvg_bitmap* bitmap)
+{
+  bitmap->convertToRGBA();
+}
+
+bool lunasvg_bitmap_valid(const lunasvg_bitmap* bitmap)
+{
+  return bitmap->valid();
+}
+
+lunasvg_document* lunasvg_document_load_from_file(const char* filename)
+{
+  return Document::loadFromFile(filename).release();
+}
+
+lunasvg_document* lunasvg_document_load_from_data(const void* data, size_t size)
+{
+  return Document::loadFromData(static_cast<const char*>(data), size).release();
+}
+
+lunasvg_document* lunasvg_document_load_from_string(const char* data)
+{
+  return Document::loadFromData(data).release();
+}
+
+void lunasvg_document_destroy(lunasvg_document* document)
+{
+  delete document;
+}
+
+void lunasvg_document_set_matrix(lunasvg_document* document, const lunasvg_matrix* matrix)
+{
+  document->setMatrix(*matrix);
+}
+
+void lunasvg_document_set_identity_matrix(lunasvg_document* document)
+{
+  document->setMatrix(Matrix().identity());
+}
+
+void lunasvg_document_get_matrix(const lunasvg_document* document, lunasvg_matrix* matrix)
+{
+  *matrix = document->matrix();
+}
+
+void lunasvg_document_get_box(const lunasvg_document* document, lunasvg_box* box)
+{
+  *box = document->box();
+}
+
+double lunasvg_document_get_width(const lunasvg_document* document)
+{
+  return document->width();
+}
+
+double lunasvg_document_get_height(const lunasvg_document* document)
+{
+  return document->height();
+}
+
+void lunasvg_document_render(const lunasvg_document* document, lunasvg_bitmap* bitmap, const lunasvg_matrix* matrix)
+{
+  document->render(*bitmap, *matrix);
+}
+
+lunasvg_bitmap* lunasvg_document_render_to_bitmap(const lunasvg_document* document, uint32_t width, uint32_t height,
+                                                  uint32_t background_color)
+{
+  return new Bitmap(document->renderToBitmap(width, height, background_color));
+}
+
+void lunasvg_document_update_layout(lunasvg_document* document)
+{
+  document->updateLayout();
+}
