# Maintainer: aur.chaotic.cx

## links
# https://obsproject.com
# https://github.com/obsproject/obs-studio
# https://github.com/obsproject/cef

## options
: ${_autoupdate:=true}

: ${_plugin_aja:=false}
: ${_plugin_webrtc:=false}

# build-aux/modules/99-cef.json
: ${_cef_branch:=6533}
: ${_cef_ver=}

## basic info
_pkgname="obs-studio"
pkgname="$_pkgname-stable"
pkgver=31.0.0
pkgrel=1
pkgdesc="Free, open source software for live streaming and recording - Browser enabled"
url="https://github.com/obsproject/obs-studio"
license=("GPL-2.0-or-later")
arch=("x86_64")

depends=(
  curl
  ffmpeg
  jack
  jansson
  libpipewire
  librist
  libvpl
  libxcomposite
  mbedtls
  pciutils
  qrcodegencpp-cmake # AUR
  qt6-svg
  rnnoise
  speexdsp
)
makedepends=(
  asio
  cmake
  ffnvcodec-headers
  git
  libfdk-aac
  luajit
  nlohmann-json
  python
  qt6-wayland
  sndio
  swig
  uthash
  vlc
  wayland
  websocketpp
  x264
  xdg-desktop-portal
)
optdepends=(
  'libfdk-aac: FDK AAC codec support'
  'libva-intel-driver: hardware encoding'
  'libva-mesa-driver: hardware encoding'
  'luajit: scripting support'
  'python: scripting support'
  'sndio: sndio input client'
  'v4l2loopback-dkms: virtual camera support'

  'vlc: VLC Media Source'
)

provides=("$_pkgname=${pkgver%%.r*}")
conflicts=("$_pkgname")

options=('!debug')

_source_main() {
  _pkgsrc="$_pkgname"
  source=("$_pkgsrc"::"git+$url.git#tag=$_pkgver")
  sha256sums=('SKIP')

  if [ "${_plugin_aja::1}" == "t" ]; then
    makedepends+=('libajantv2') # AUR
    _plugin_aja='ON'
  else
    _plugin_aja='OFF'
  fi

  if [ "${_plugin_webrtc::1}" == "t" ]; then
    makedepends+=('libdatachannel')
    _plugin_webrtc='ON'
  else
    _plugin_webrtc='OFF'
  fi
}

_source_obs_studio() {
  source+=(
    #'obsproject.libdshowcapture'::'git+https://github.com/obsproject/libdshowcapture.git'
    'obsproject.obs-browser'::'git+https://github.com/obsproject/obs-browser.git'
    'obsproject.obs-websocket'::'git+https://github.com/obsproject/obs-websocket.git'
  )

  sha256sums+=(
    'SKIP'
    'SKIP'
  )
}

_prepare_obs_studio() (
  cd "$srcdir/$_pkgsrc"
  local _submodules=(
    #'obsproject.libdshowcapture'::'plugins/win-dshow/libdshowcapture'
    'obsproject.obs-browser'::'plugins/obs-browser'
    'obsproject.obs-websocket'::'plugins/obs-websocket'
  )
  _submodule_update
)

_source_cef() {
  depends+=(
    at-spi2-core
    libxdamage
    libxrandr
    nspr
    nss
  )

  makedepends+=(
    alsa-lib
    dbus
    expat
    gcc-libs
    glib2
    glibc
    libcups
    libdrm
    libx11
    libxcb
    libxcomposite
    libxext
    libxfixes
    libxkbcommon
    mesa
    wayland
  )

  _cef_src="cef_binary_${_cef_branch}_linux_${CARCH}"
  _cef_ext="tar.xz"
  _cef_filename="$_cef_src$_cef_ver.$_cef_ext"
  _cef_dl_url="https://cdn-fastly.obsproject.com/downloads/"

  source+=("$_cef_filename"::"$_cef_dl_url/$_cef_filename")
  sha256sums+=('SKIP')
}

prepare() {
  _submodule_update() {
    local _module
    for _module in "${_submodules[@]}"; do
      git submodule init "${_module##*::}"
      git submodule set-url "${_module##*::}" "$srcdir/${_module%::*}"
      git -c protocol.file.allow=always submodule update "${_module##*::}"
    done
  }

  _prepare_obs_studio
}

_build_cef() {
  local _cmake_options=(
    -S "$_cef_src"
    -B "$_cef_src"
    -DCMAKE_BUILD_TYPE=Release
    -DPROJECT_ARCH=$CARCH
    -Wno-dev
  )

  cmake "${_cmake_options[@]}"
  cmake --build "$_cef_src"

  # need absolute path later
  _cef_src="$srcdir/$_cef_src"
}

_build_obs_studio() {
  local _cmake_options=(
    -B build
    -S "$_pkgsrc"
    -DCMAKE_BUILD_TYPE=None
    -DCMAKE_INSTALL_PREFIX='/usr'
    -DCMAKE_INSTALL_LIBDIR='lib'
    -DCEF_ROOT_DIR="$_cef_src"
    -DOBS_VERSION_OVERRIDE="${pkgver%%.r*}"
    -DOBS_COMPILE_DEPRECATION_AS_WARNING=ON
    -DENABLE_BROWSER=ON # qrcodegencpp-cmake
    -DENABLE_LIBFDK=ON
    -DENABLE_UNIT_TESTS=OFF
    -DBUILD_TESTS=OFF
    -Wno-dev

    -DENABLE_AJA="${_plugin_aja:?}"
    -DENABLE_JACK=ON
    -DENABLE_NEW_MPEGTS_OUTPUT=ON
    -DENABLE_VLC=OFF
    -DENABLE_VST=ON
    -DENABLE_WEBRTC="${_plugin_webrtc:?}"
  )

  cmake "${_cmake_options[@]}"
  cmake --build build
}

build() {
  export CFLAGS CXXFLAGS
  CFLAGS="${CFLAGS/_FORTIFY_SOURCE=*/_FORTIFY_SOURCE=2}"
  CXXFLAGS="${CXXFLAGS/_FORTIFY_SOURCE=*/_FORTIFY_SOURCE=2}"

  _build_cef
  _build_obs_studio
}

package() {
  DESTDIR="$pkgdir" cmake --install build

  # fix permissions
  chmod -R u=rwX,go=rX "$pkgdir"
}

_update_version() {
  : ${_pkgver:=$pkgver}

  if [[ "${_autoupdate::1}" != "t" ]]; then
    return
  fi

  local _response=$(curl -Ssf "$url/releases.atom")
  local _tag=$(
    printf '%s' "$_response" \
      | grep '/releases/tag/' \
      | sed -E 's@^.*/releases/tag/(.*)".*$@\1@' \
      | grep -Ev '[a-z]{2}' | sort -V | tail -1
  )
  local _pkgver_new="${_tag#v}"

  # update _pkgver
  if [ "$_pkgver" != "${_pkgver_new:?}" ]; then
    _pkgver="${_pkgver_new:?}"
  fi

  pkgver() {
    echo "${_pkgver:?}"
  }
}

_update_version
_source_main
_source_cef
_source_obs_studio
