# Maintainer: aur.chaotic.cx

## options
: ${_plugin_aja:=false}

# build-aux/modules/99-cef.json
: ${_cef_branch:=6533}
: ${_cef_ver=_v6}

_pkgname="obs-studio"
pkgname="$_pkgname-stable"
pkgver=32.0.0
pkgrel=1
pkgdesc="Free, open source software for live streaming and recording - Browser enabled"
url="https://github.com/obsproject/obs-studio"
license=("GPL-2.0-or-later")
arch=("x86_64")

depends=(
  'curl'
  'ffmpeg'
  'jack'
  'jansson'
  'libdatachannel'
  'libpipewire'
  'librist'
  'libvpl'
  'libxcomposite'
  'mbedtls'
  'pciutils'
  'qrcodegencpp-cmake'
  'qt6-svg'
  'rnnoise'
  'speexdsp'
)
makedepends=(
  'asio'
  'cmake'
  'extra-cmake-modules'
  'ffnvcodec-headers'
  'git'
  'libfdk-aac'
  'luajit'
  'ninja'
  'nlohmann-json'
  'python'
  'qt6-wayland'
  'simde'
  'sndio'
  'swig'
  'uthash'
  'vlc'
  'wayland'
  'websocketpp'
  'x264'
  'xdg-desktop-portal'
)
optdepends=(
  'libfdk-aac: FDK AAC codec support'
  'libva-intel-driver: hardware encoding'
  'libva-mesa-driver: hardware encoding'
  'luajit: scripting support'
  'python: scripting support'
  'sndio: sndio input client'
  'v4l2loopback-dkms: virtual camera support'
  'vlc: VLC Media Source'
)

if [ "${_plugin_aja::1}" == "t" ]; then
  depends+=('libajantv2') # AUR
  _plugin_aja='ON'
else
  _plugin_aja='OFF'
fi

provides=("$_pkgname=${pkgver%%.r*}")
conflicts=("$_pkgname")

_source_main() {
  _pkgsrc="$_pkgname"
  source=("$_pkgsrc"::"git+$url.git#tag=$pkgver")
  sha256sums=('SKIP')
}

_source_cef() {
  depends+=(
    'at-spi2-core'
    'libxdamage'
    'libxrandr'
    'nspr'
    'nss'
  )

  makedepends+=(
    'alsa-lib'
    'dbus'
    'expat'
    'glib2'
    'libcups'
    'libdrm'
    'libx11'
    'libxcb'
    'libxcomposite'
    'libxext'
    'libxfixes'
    'libxkbcommon'
    'mesa'
    'wayland'
  )

  _cef_src="cef_binary_${_cef_branch}_linux_${CARCH}"
  _cef_ext="tar.xz"
  _cef_filename="$_cef_src$_cef_ver.$_cef_ext"
  _cef_dl_url="https://cdn-fastly.obsproject.com/downloads"

  source+=("$_cef_filename"::"$_cef_dl_url/$_cef_filename")
  sha256sums+=('SKIP')
}

_source_main
_source_cef

prepare() {
  cd "$_pkgsrc"
  git rm -r deps/libdshowcapture/src
  git submodule update --init --recursive --depth 1
}

_build_cef() (
  local _cmake_options=(
    -S "$_cef_src"
    -B "$_cef_src"
    -G Ninja
    -DCMAKE_BUILD_TYPE=Release
    -DPROJECT_ARCH=$CARCH
    -Wno-dev
  )

  cmake "${_cmake_options[@]}"
  cmake --build "$_cef_src"
)

_build_obs_studio() (
  local _cmake_options=(
    -B build
    -S "$_pkgsrc"
    -G Ninja
    -DCMAKE_BUILD_TYPE=None
    -DCMAKE_INSTALL_PREFIX='/usr'
    -DCMAKE_INSTALL_LIBDIR='lib'
    -DCEF_ROOT_DIR="$srcdir/$_cef_src"
    -DOBS_VERSION_OVERRIDE="${pkgver%%.r*}"
    -DOBS_COMPILE_DEPRECATION_AS_WARNING=ON
    -DENABLE_BROWSER=ON # qrcodegencpp-cmake
    -DENABLE_LIBFDK=ON
    -DENABLE_UNIT_TESTS=OFF
    -DBUILD_TESTS=OFF
    -Wno-dev

    -DENABLE_AJA="${_plugin_aja:?}"
    -DENABLE_JACK=ON
    -DENABLE_NEW_MPEGTS_OUTPUT=ON
    -DENABLE_VLC=OFF
    -DENABLE_VST=ON
    -DENABLE_WEBRTC=ON
  )

  cmake "${_cmake_options[@]}"
  cmake --build build
)

build() (
  export CFLAGS CXXFLAGS
  CFLAGS="${CFLAGS/_FORTIFY_SOURCE=?/_FORTIFY_SOURCE=2}"
  CXXFLAGS="${CXXFLAGS/_FORTIFY_SOURCE=?/_FORTIFY_SOURCE=2}"

  _build_cef
  _build_obs_studio
)

package() {
  DESTDIR="$pkgdir" cmake --install build
  chmod -R u+rwX,go+rX,go-w "$pkgdir"
}
